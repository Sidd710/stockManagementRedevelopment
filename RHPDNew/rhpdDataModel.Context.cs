//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RHPDNew
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class rhpdEntities : DbContext
    {
        public rhpdEntities()
            : base("name=rhpdEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AddPMContainer> AddPMContainers { get; set; }
        public virtual DbSet<BatchDepot> BatchDepots { get; set; }
        public virtual DbSet<BatchMaster> BatchMasters { get; set; }
        public virtual DbSet<CategoryMaster> CategoryMasters { get; set; }
        public virtual DbSet<CategoryType> CategoryTypes { get; set; }
        public virtual DbSet<CityMaster> CityMasters { get; set; }
        public virtual DbSet<CommandMaster> CommandMasters { get; set; }
        public virtual DbSet<CountryMaster> CountryMasters { get; set; }
        public virtual DbSet<DeptMaster> DeptMasters { get; set; }
        public virtual DbSet<DepuMaster> DepuMasters { get; set; }
        public virtual DbSet<ESLIssue> ESLIssues { get; set; }
        public virtual DbSet<EslMaster> EslMasters { get; set; }
        public virtual DbSet<ExpenseVoucherMaster> ExpenseVoucherMasters { get; set; }
        public virtual DbSet<Formation> Formations { get; set; }
        public virtual DbSet<ForwardNoteMaster> ForwardNoteMasters { get; set; }
        public virtual DbSet<GateInout> GateInouts { get; set; }
        public virtual DbSet<GatInOut> GatInOuts { get; set; }
        public virtual DbSet<IDT> IDTs { get; set; }
        public virtual DbSet<IDTStockTransfer> IDTStockTransfers { get; set; }
        public virtual DbSet<IssueVoucher> IssueVouchers { get; set; }
        public virtual DbSet<ManuMgmt> ManuMgmts { get; set; }
        public virtual DbSet<OriginalManufacture_> OriginalManufacture_ { get; set; }
        public virtual DbSet<PMandContainerMaster> PMandContainerMasters { get; set; }
        public virtual DbSet<PMCapacity> PMCapacities { get; set; }
        public virtual DbSet<PMCondition> PMConditions { get; set; }
        public virtual DbSet<PMGrade> PMGrades { get; set; }
        public virtual DbSet<PMName> PMNames { get; set; }
        public virtual DbSet<ProductMaster> ProductMasters { get; set; }
        public virtual DbSet<QuantityType> QuantityTypes { get; set; }
        public virtual DbSet<RecievedFrom> RecievedFroms { get; set; }
        public virtual DbSet<RoleMaster> RoleMasters { get; set; }
        public virtual DbSet<StatesMaster> StatesMasters { get; set; }
        public virtual DbSet<StatusMaster> StatusMasters { get; set; }
        public virtual DbSet<StockMaster> StockMasters { get; set; }
        public virtual DbSet<StockPakaging> StockPakagings { get; set; }
        public virtual DbSet<StockSpillage> StockSpillages { get; set; }
        public virtual DbSet<StockTransfer> StockTransfers { get; set; }
        public virtual DbSet<StockVehicle> StockVehicles { get; set; }
        public virtual DbSet<supplier> suppliers { get; set; }
        public virtual DbSet<TallySheet> TallySheets { get; set; }
        public virtual DbSet<tblExpensePMContainer> tblExpensePMContainers { get; set; }
        public virtual DbSet<tblIssueVoucherDetail> tblIssueVoucherDetails { get; set; }
        public virtual DbSet<tblIssueVoucherVehicleDetail> tblIssueVoucherVehicleDetails { get; set; }
        public virtual DbSet<tblLPCP> tblLPCPs { get; set; }
        public virtual DbSet<tblQuarter> tblQuarters { get; set; }
        public virtual DbSet<tblSection> tblSections { get; set; }
        public virtual DbSet<tblStockOutMain> tblStockOutMains { get; set; }
        public virtual DbSet<tblWarehouse> tblWarehouses { get; set; }
        public virtual DbSet<TypeOfOrder> TypeOfOrders { get; set; }
        public virtual DbSet<UnitMaster> UnitMasters { get; set; }
        public virtual DbSet<UnitType> UnitTypes { get; set; }
        public virtual DbSet<UserMaster> UserMasters { get; set; }
        public virtual DbSet<gh> ghs { get; set; }
        public virtual DbSet<tbl_Atttribute> tbl_Atttribute { get; set; }
        public virtual DbSet<tbl_Authority> tbl_Authority { get; set; }
        public virtual DbSet<tbl_batchIdt> tbl_batchIdt { get; set; }
        public virtual DbSet<tbl_financialyear> tbl_financialyear { get; set; }
        public virtual DbSet<tbl_idtQty_Quarter> tbl_idtQty_Quarter { get; set; }
        public virtual DbSet<tbl_IDTrefrence> tbl_IDTrefrence { get; set; }
        public virtual DbSet<tbl_IssueOrder> tbl_IssueOrder { get; set; }
        public virtual DbSet<tbl_IssueVoucher> tbl_IssueVoucher { get; set; }
        public virtual DbSet<tbl_issuevoucherdetail> tbl_issuevoucherdetail { get; set; }
        public virtual DbSet<tbl_loadtallydetail> tbl_loadtallydetail { get; set; }
        public virtual DbSet<tbl_loadtaly> tbl_loadtaly { get; set; }
        public virtual DbSet<tbl_ProductIDT_Quantity> tbl_ProductIDT_Quantity { get; set; }
        public virtual DbSet<tbl_QuarterRange> tbl_QuarterRange { get; set; }
        public virtual DbSet<tbl_vechileMaster> tbl_vechileMaster { get; set; }
        public virtual DbSet<tbl_vechileMaster_Type> tbl_vechileMaster_Type { get; set; }
    
        [DbFunction("rhpdEntities", "Split")]
        public virtual IQueryable<Split_Result> Split(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("String", @string) :
                new ObjectParameter("String", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Split_Result>("[rhpdEntities].[Split](@String, @Delimiter)", stringParameter, delimiterParameter);
        }
    
        public virtual int managecommand(Nullable<int> id, string name, string descripition, Nullable<bool> isActive, Nullable<int> addedby, Nullable<System.DateTime> addedon, Nullable<int> updatedby, Nullable<System.DateTime> undatedOn, string action)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descripitionParameter = descripition != null ?
                new ObjectParameter("Descripition", descripition) :
                new ObjectParameter("Descripition", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var addedbyParameter = addedby.HasValue ?
                new ObjectParameter("Addedby", addedby) :
                new ObjectParameter("Addedby", typeof(int));
    
            var addedonParameter = addedon.HasValue ?
                new ObjectParameter("Addedon", addedon) :
                new ObjectParameter("Addedon", typeof(System.DateTime));
    
            var updatedbyParameter = updatedby.HasValue ?
                new ObjectParameter("Updatedby", updatedby) :
                new ObjectParameter("Updatedby", typeof(int));
    
            var undatedOnParameter = undatedOn.HasValue ?
                new ObjectParameter("UndatedOn", undatedOn) :
                new ObjectParameter("UndatedOn", typeof(System.DateTime));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("managecommand", idParameter, nameParameter, descripitionParameter, isActiveParameter, addedbyParameter, addedonParameter, updatedbyParameter, undatedOnParameter, actionParameter);
        }
    
        public virtual int proc_getSeedNumber(string iO, ObjectParameter output, string getIO)
        {
            var iOParameter = iO != null ?
                new ObjectParameter("IO", iO) :
                new ObjectParameter("IO", typeof(string));
    
            var getIOParameter = getIO != null ?
                new ObjectParameter("getIO", getIO) :
                new ObjectParameter("getIO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_getSeedNumber", iOParameter, output, getIOParameter);
        }
    
        public virtual ObjectResult<sp_EslForwardingNoteProc_Result> sp_EslForwardingNoteProc(Nullable<int> batchId, Nullable<int> fnId, string atNoRef, string forwardingNoteNumber, Nullable<System.DateTime> forwardNoteDate, string officerDesignation, string officerPostalAddress, string addressee, string nomenStore, string containerType, string sampleRefNumber, string sampleIdentificationMarks, Nullable<decimal> sampleQualtity, Nullable<int> numberOfSamples, string sampleType, Nullable<System.DateTime> dispatchDate, string dispatchMethod, Nullable<System.DateTime> sampleDrawnDate, string drawerNameAndRank, Nullable<decimal> quantityRepressntedBySample, string intendedDestination, Nullable<System.DateTime> fillingDate, string iNoteNumber, Nullable<System.DateTime> iNoteDate, string previousTestReferences, string tankNumber, string containerMarkingDetails, string tradeOwned, string govtStock, string tradeGovtAccepted, string reasonForTest, string governingSupply, string actionName, Nullable<int> isForwardingNoteActive, Nullable<System.DateTime> newEslDate, Nullable<System.DateTime> modifyDate, Nullable<System.DateTime> previousEslDate, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string status, ObjectParameter output)
        {
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("batchId", batchId) :
                new ObjectParameter("batchId", typeof(int));
    
            var fnIdParameter = fnId.HasValue ?
                new ObjectParameter("FnId", fnId) :
                new ObjectParameter("FnId", typeof(int));
    
            var atNoRefParameter = atNoRef != null ?
                new ObjectParameter("atNoRef", atNoRef) :
                new ObjectParameter("atNoRef", typeof(string));
    
            var forwardingNoteNumberParameter = forwardingNoteNumber != null ?
                new ObjectParameter("forwardingNoteNumber", forwardingNoteNumber) :
                new ObjectParameter("forwardingNoteNumber", typeof(string));
    
            var forwardNoteDateParameter = forwardNoteDate.HasValue ?
                new ObjectParameter("forwardNoteDate", forwardNoteDate) :
                new ObjectParameter("forwardNoteDate", typeof(System.DateTime));
    
            var officerDesignationParameter = officerDesignation != null ?
                new ObjectParameter("officerDesignation", officerDesignation) :
                new ObjectParameter("officerDesignation", typeof(string));
    
            var officerPostalAddressParameter = officerPostalAddress != null ?
                new ObjectParameter("officerPostalAddress", officerPostalAddress) :
                new ObjectParameter("officerPostalAddress", typeof(string));
    
            var addresseeParameter = addressee != null ?
                new ObjectParameter("addressee", addressee) :
                new ObjectParameter("addressee", typeof(string));
    
            var nomenStoreParameter = nomenStore != null ?
                new ObjectParameter("nomenStore", nomenStore) :
                new ObjectParameter("nomenStore", typeof(string));
    
            var containerTypeParameter = containerType != null ?
                new ObjectParameter("containerType", containerType) :
                new ObjectParameter("containerType", typeof(string));
    
            var sampleRefNumberParameter = sampleRefNumber != null ?
                new ObjectParameter("sampleRefNumber", sampleRefNumber) :
                new ObjectParameter("sampleRefNumber", typeof(string));
    
            var sampleIdentificationMarksParameter = sampleIdentificationMarks != null ?
                new ObjectParameter("sampleIdentificationMarks", sampleIdentificationMarks) :
                new ObjectParameter("sampleIdentificationMarks", typeof(string));
    
            var sampleQualtityParameter = sampleQualtity.HasValue ?
                new ObjectParameter("sampleQualtity", sampleQualtity) :
                new ObjectParameter("sampleQualtity", typeof(decimal));
    
            var numberOfSamplesParameter = numberOfSamples.HasValue ?
                new ObjectParameter("numberOfSamples", numberOfSamples) :
                new ObjectParameter("numberOfSamples", typeof(int));
    
            var sampleTypeParameter = sampleType != null ?
                new ObjectParameter("sampleType", sampleType) :
                new ObjectParameter("sampleType", typeof(string));
    
            var dispatchDateParameter = dispatchDate.HasValue ?
                new ObjectParameter("dispatchDate", dispatchDate) :
                new ObjectParameter("dispatchDate", typeof(System.DateTime));
    
            var dispatchMethodParameter = dispatchMethod != null ?
                new ObjectParameter("dispatchMethod", dispatchMethod) :
                new ObjectParameter("dispatchMethod", typeof(string));
    
            var sampleDrawnDateParameter = sampleDrawnDate.HasValue ?
                new ObjectParameter("sampleDrawnDate", sampleDrawnDate) :
                new ObjectParameter("sampleDrawnDate", typeof(System.DateTime));
    
            var drawerNameAndRankParameter = drawerNameAndRank != null ?
                new ObjectParameter("drawerNameAndRank", drawerNameAndRank) :
                new ObjectParameter("drawerNameAndRank", typeof(string));
    
            var quantityRepressntedBySampleParameter = quantityRepressntedBySample.HasValue ?
                new ObjectParameter("quantityRepressntedBySample", quantityRepressntedBySample) :
                new ObjectParameter("quantityRepressntedBySample", typeof(decimal));
    
            var intendedDestinationParameter = intendedDestination != null ?
                new ObjectParameter("intendedDestination", intendedDestination) :
                new ObjectParameter("intendedDestination", typeof(string));
    
            var fillingDateParameter = fillingDate.HasValue ?
                new ObjectParameter("fillingDate", fillingDate) :
                new ObjectParameter("fillingDate", typeof(System.DateTime));
    
            var iNoteNumberParameter = iNoteNumber != null ?
                new ObjectParameter("iNoteNumber", iNoteNumber) :
                new ObjectParameter("iNoteNumber", typeof(string));
    
            var iNoteDateParameter = iNoteDate.HasValue ?
                new ObjectParameter("iNoteDate", iNoteDate) :
                new ObjectParameter("iNoteDate", typeof(System.DateTime));
    
            var previousTestReferencesParameter = previousTestReferences != null ?
                new ObjectParameter("previousTestReferences", previousTestReferences) :
                new ObjectParameter("previousTestReferences", typeof(string));
    
            var tankNumberParameter = tankNumber != null ?
                new ObjectParameter("tankNumber", tankNumber) :
                new ObjectParameter("tankNumber", typeof(string));
    
            var containerMarkingDetailsParameter = containerMarkingDetails != null ?
                new ObjectParameter("containerMarkingDetails", containerMarkingDetails) :
                new ObjectParameter("containerMarkingDetails", typeof(string));
    
            var tradeOwnedParameter = tradeOwned != null ?
                new ObjectParameter("tradeOwned", tradeOwned) :
                new ObjectParameter("tradeOwned", typeof(string));
    
            var govtStockParameter = govtStock != null ?
                new ObjectParameter("govtStock", govtStock) :
                new ObjectParameter("govtStock", typeof(string));
    
            var tradeGovtAcceptedParameter = tradeGovtAccepted != null ?
                new ObjectParameter("tradeGovtAccepted", tradeGovtAccepted) :
                new ObjectParameter("tradeGovtAccepted", typeof(string));
    
            var reasonForTestParameter = reasonForTest != null ?
                new ObjectParameter("reasonForTest", reasonForTest) :
                new ObjectParameter("reasonForTest", typeof(string));
    
            var governingSupplyParameter = governingSupply != null ?
                new ObjectParameter("governingSupply", governingSupply) :
                new ObjectParameter("governingSupply", typeof(string));
    
            var actionNameParameter = actionName != null ?
                new ObjectParameter("actionName", actionName) :
                new ObjectParameter("actionName", typeof(string));
    
            var isForwardingNoteActiveParameter = isForwardingNoteActive.HasValue ?
                new ObjectParameter("isForwardingNoteActive", isForwardingNoteActive) :
                new ObjectParameter("isForwardingNoteActive", typeof(int));
    
            var newEslDateParameter = newEslDate.HasValue ?
                new ObjectParameter("NewEslDate", newEslDate) :
                new ObjectParameter("NewEslDate", typeof(System.DateTime));
    
            var modifyDateParameter = modifyDate.HasValue ?
                new ObjectParameter("ModifyDate", modifyDate) :
                new ObjectParameter("ModifyDate", typeof(System.DateTime));
    
            var previousEslDateParameter = previousEslDate.HasValue ?
                new ObjectParameter("PreviousEslDate", previousEslDate) :
                new ObjectParameter("PreviousEslDate", typeof(System.DateTime));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EslForwardingNoteProc_Result>("sp_EslForwardingNoteProc", batchIdParameter, fnIdParameter, atNoRefParameter, forwardingNoteNumberParameter, forwardNoteDateParameter, officerDesignationParameter, officerPostalAddressParameter, addresseeParameter, nomenStoreParameter, containerTypeParameter, sampleRefNumberParameter, sampleIdentificationMarksParameter, sampleQualtityParameter, numberOfSamplesParameter, sampleTypeParameter, dispatchDateParameter, dispatchMethodParameter, sampleDrawnDateParameter, drawerNameAndRankParameter, quantityRepressntedBySampleParameter, intendedDestinationParameter, fillingDateParameter, iNoteNumberParameter, iNoteDateParameter, previousTestReferencesParameter, tankNumberParameter, containerMarkingDetailsParameter, tradeOwnedParameter, govtStockParameter, tradeGovtAcceptedParameter, reasonForTestParameter, governingSupplyParameter, actionNameParameter, isForwardingNoteActiveParameter, newEslDateParameter, modifyDateParameter, previousEslDateParameter, startDateParameter, endDateParameter, statusParameter, output);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_Gat(Nullable<int> id, Nullable<bool> isLoadIn, string recievedfrom, string vehbano, string franchiseeno, string armyNo, string rank, string name, Nullable<System.DateTime> timein, string typeofvehicle, string unitQuantityTypeId, string loadin, string idtId, Nullable<System.DateTime> timeout, string loadout, string stationDepuID, string stationUnitId, string fuelintankIn, string fuelintankOut, Nullable<int> addedBy, Nullable<System.DateTime> addedOn, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedOn, Nullable<bool> isActive, string action, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var isLoadInParameter = isLoadIn.HasValue ?
                new ObjectParameter("IsLoadIn", isLoadIn) :
                new ObjectParameter("IsLoadIn", typeof(bool));
    
            var recievedfromParameter = recievedfrom != null ?
                new ObjectParameter("Recievedfrom", recievedfrom) :
                new ObjectParameter("Recievedfrom", typeof(string));
    
            var vehbanoParameter = vehbano != null ?
                new ObjectParameter("vehbano", vehbano) :
                new ObjectParameter("vehbano", typeof(string));
    
            var franchiseenoParameter = franchiseeno != null ?
                new ObjectParameter("franchiseeno", franchiseeno) :
                new ObjectParameter("franchiseeno", typeof(string));
    
            var armyNoParameter = armyNo != null ?
                new ObjectParameter("ArmyNo", armyNo) :
                new ObjectParameter("ArmyNo", typeof(string));
    
            var rankParameter = rank != null ?
                new ObjectParameter("rank", rank) :
                new ObjectParameter("rank", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var timeinParameter = timein.HasValue ?
                new ObjectParameter("timein", timein) :
                new ObjectParameter("timein", typeof(System.DateTime));
    
            var typeofvehicleParameter = typeofvehicle != null ?
                new ObjectParameter("typeofvehicle", typeofvehicle) :
                new ObjectParameter("typeofvehicle", typeof(string));
    
            var unitQuantityTypeIdParameter = unitQuantityTypeId != null ?
                new ObjectParameter("unitQuantityTypeId", unitQuantityTypeId) :
                new ObjectParameter("unitQuantityTypeId", typeof(string));
    
            var loadinParameter = loadin != null ?
                new ObjectParameter("loadin", loadin) :
                new ObjectParameter("loadin", typeof(string));
    
            var idtIdParameter = idtId != null ?
                new ObjectParameter("IdtId", idtId) :
                new ObjectParameter("IdtId", typeof(string));
    
            var timeoutParameter = timeout.HasValue ?
                new ObjectParameter("timeout", timeout) :
                new ObjectParameter("timeout", typeof(System.DateTime));
    
            var loadoutParameter = loadout != null ?
                new ObjectParameter("loadout", loadout) :
                new ObjectParameter("loadout", typeof(string));
    
            var stationDepuIDParameter = stationDepuID != null ?
                new ObjectParameter("stationDepuID", stationDepuID) :
                new ObjectParameter("stationDepuID", typeof(string));
    
            var stationUnitIdParameter = stationUnitId != null ?
                new ObjectParameter("stationUnitId", stationUnitId) :
                new ObjectParameter("stationUnitId", typeof(string));
    
            var fuelintankInParameter = fuelintankIn != null ?
                new ObjectParameter("fuelintankIn", fuelintankIn) :
                new ObjectParameter("fuelintankIn", typeof(string));
    
            var fuelintankOutParameter = fuelintankOut != null ?
                new ObjectParameter("fuelintankOut", fuelintankOut) :
                new ObjectParameter("fuelintankOut", typeof(string));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedOnParameter = addedOn.HasValue ?
                new ObjectParameter("AddedOn", addedOn) :
                new ObjectParameter("AddedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_Gat", idParameter, isLoadInParameter, recievedfromParameter, vehbanoParameter, franchiseenoParameter, armyNoParameter, rankParameter, nameParameter, timeinParameter, typeofvehicleParameter, unitQuantityTypeIdParameter, loadinParameter, idtIdParameter, timeoutParameter, loadoutParameter, stationDepuIDParameter, stationUnitIdParameter, fuelintankInParameter, fuelintankOutParameter, addedByParameter, addedOnParameter, modifiedByParameter, modifiedOnParameter, isActiveParameter, actionParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<sp_GateInOut_Result> sp_GateInOut(Nullable<int> id, string vehbano, string franchiseeno, string armyNo, string rank, string name, Nullable<System.DateTime> timein, string typeofvehicle, Nullable<int> unitQuantityTypeId, string loadin, Nullable<int> idtId, Nullable<System.DateTime> timeout, string loadout, Nullable<int> stationDepuID, Nullable<int> stationUnitId, string fuelintankIn, string fuelintankOut, Nullable<int> addedBy, Nullable<System.DateTime> addedOn, Nullable<int> modifiedBy, Nullable<int> modifiedOn, Nullable<bool> isActive, string action, ObjectParameter output)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var vehbanoParameter = vehbano != null ?
                new ObjectParameter("vehbano", vehbano) :
                new ObjectParameter("vehbano", typeof(string));
    
            var franchiseenoParameter = franchiseeno != null ?
                new ObjectParameter("franchiseeno", franchiseeno) :
                new ObjectParameter("franchiseeno", typeof(string));
    
            var armyNoParameter = armyNo != null ?
                new ObjectParameter("ArmyNo", armyNo) :
                new ObjectParameter("ArmyNo", typeof(string));
    
            var rankParameter = rank != null ?
                new ObjectParameter("rank", rank) :
                new ObjectParameter("rank", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var timeinParameter = timein.HasValue ?
                new ObjectParameter("timein", timein) :
                new ObjectParameter("timein", typeof(System.DateTime));
    
            var typeofvehicleParameter = typeofvehicle != null ?
                new ObjectParameter("typeofvehicle", typeofvehicle) :
                new ObjectParameter("typeofvehicle", typeof(string));
    
            var unitQuantityTypeIdParameter = unitQuantityTypeId.HasValue ?
                new ObjectParameter("unitQuantityTypeId", unitQuantityTypeId) :
                new ObjectParameter("unitQuantityTypeId", typeof(int));
    
            var loadinParameter = loadin != null ?
                new ObjectParameter("loadin", loadin) :
                new ObjectParameter("loadin", typeof(string));
    
            var idtIdParameter = idtId.HasValue ?
                new ObjectParameter("IdtId", idtId) :
                new ObjectParameter("IdtId", typeof(int));
    
            var timeoutParameter = timeout.HasValue ?
                new ObjectParameter("timeout", timeout) :
                new ObjectParameter("timeout", typeof(System.DateTime));
    
            var loadoutParameter = loadout != null ?
                new ObjectParameter("loadout", loadout) :
                new ObjectParameter("loadout", typeof(string));
    
            var stationDepuIDParameter = stationDepuID.HasValue ?
                new ObjectParameter("stationDepuID", stationDepuID) :
                new ObjectParameter("stationDepuID", typeof(int));
    
            var stationUnitIdParameter = stationUnitId.HasValue ?
                new ObjectParameter("stationUnitId", stationUnitId) :
                new ObjectParameter("stationUnitId", typeof(int));
    
            var fuelintankInParameter = fuelintankIn != null ?
                new ObjectParameter("fuelintankIn", fuelintankIn) :
                new ObjectParameter("fuelintankIn", typeof(string));
    
            var fuelintankOutParameter = fuelintankOut != null ?
                new ObjectParameter("fuelintankOut", fuelintankOut) :
                new ObjectParameter("fuelintankOut", typeof(string));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedOnParameter = addedOn.HasValue ?
                new ObjectParameter("AddedOn", addedOn) :
                new ObjectParameter("AddedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GateInOut_Result>("sp_GateInOut", idParameter, vehbanoParameter, franchiseenoParameter, armyNoParameter, rankParameter, nameParameter, timeinParameter, typeofvehicleParameter, unitQuantityTypeIdParameter, loadinParameter, idtIdParameter, timeoutParameter, loadoutParameter, stationDepuIDParameter, stationUnitIdParameter, fuelintankInParameter, fuelintankOutParameter, addedByParameter, addedOnParameter, modifiedByParameter, modifiedOnParameter, isActiveParameter, actionParameter, output);
        }
    
        public virtual ObjectResult<sp_IssueVoucher_Result> sp_IssueVoucher(Nullable<int> id, string ivNo, Nullable<int> idtId, Nullable<int> toDepuId, Nullable<int> toUnitId, string vechileNo, string authority, string through, Nullable<bool> isActive, Nullable<System.DateTime> addedOn, Nullable<int> addedBy, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy, string action, ObjectParameter output, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var ivNoParameter = ivNo != null ?
                new ObjectParameter("ivNo", ivNo) :
                new ObjectParameter("ivNo", typeof(string));
    
            var idtIdParameter = idtId.HasValue ?
                new ObjectParameter("IdtId", idtId) :
                new ObjectParameter("IdtId", typeof(int));
    
            var toDepuIdParameter = toDepuId.HasValue ?
                new ObjectParameter("ToDepuId", toDepuId) :
                new ObjectParameter("ToDepuId", typeof(int));
    
            var toUnitIdParameter = toUnitId.HasValue ?
                new ObjectParameter("ToUnitId", toUnitId) :
                new ObjectParameter("ToUnitId", typeof(int));
    
            var vechileNoParameter = vechileNo != null ?
                new ObjectParameter("VechileNo", vechileNo) :
                new ObjectParameter("VechileNo", typeof(string));
    
            var authorityParameter = authority != null ?
                new ObjectParameter("Authority", authority) :
                new ObjectParameter("Authority", typeof(string));
    
            var throughParameter = through != null ?
                new ObjectParameter("Through", through) :
                new ObjectParameter("Through", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var addedOnParameter = addedOn.HasValue ?
                new ObjectParameter("AddedOn", addedOn) :
                new ObjectParameter("AddedOn", typeof(System.DateTime));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_IssueVoucher_Result>("sp_IssueVoucher", idParameter, ivNoParameter, idtIdParameter, toDepuIdParameter, toUnitIdParameter, vechileNoParameter, authorityParameter, throughParameter, isActiveParameter, addedOnParameter, addedByParameter, modifiedOnParameter, modifiedByParameter, actionParameter, output, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<sp_ManageTallySheet_Result> sp_ManageTallySheet(Nullable<int> id, Nullable<int> idtId, Nullable<int> depuIdFrom, Nullable<int> unitIdFrom, Nullable<int> toDepuId, Nullable<int> toUnitId, string authority, string through, string vehBaNo, Nullable<int> addedBy, Nullable<System.DateTime> addedOn, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedOn, Nullable<bool> isActive, string action, ObjectParameter output, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var idtIdParameter = idtId.HasValue ?
                new ObjectParameter("IdtId", idtId) :
                new ObjectParameter("IdtId", typeof(int));
    
            var depuIdFromParameter = depuIdFrom.HasValue ?
                new ObjectParameter("DepuIdFrom", depuIdFrom) :
                new ObjectParameter("DepuIdFrom", typeof(int));
    
            var unitIdFromParameter = unitIdFrom.HasValue ?
                new ObjectParameter("UnitIdFrom", unitIdFrom) :
                new ObjectParameter("UnitIdFrom", typeof(int));
    
            var toDepuIdParameter = toDepuId.HasValue ?
                new ObjectParameter("ToDepuId", toDepuId) :
                new ObjectParameter("ToDepuId", typeof(int));
    
            var toUnitIdParameter = toUnitId.HasValue ?
                new ObjectParameter("ToUnitId", toUnitId) :
                new ObjectParameter("ToUnitId", typeof(int));
    
            var authorityParameter = authority != null ?
                new ObjectParameter("Authority", authority) :
                new ObjectParameter("Authority", typeof(string));
    
            var throughParameter = through != null ?
                new ObjectParameter("Through", through) :
                new ObjectParameter("Through", typeof(string));
    
            var vehBaNoParameter = vehBaNo != null ?
                new ObjectParameter("VehBaNo", vehBaNo) :
                new ObjectParameter("VehBaNo", typeof(string));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedOnParameter = addedOn.HasValue ?
                new ObjectParameter("AddedOn", addedOn) :
                new ObjectParameter("AddedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ManageTallySheet_Result>("sp_ManageTallySheet", idParameter, idtIdParameter, depuIdFromParameter, unitIdFromParameter, toDepuIdParameter, toUnitIdParameter, authorityParameter, throughParameter, vehBaNoParameter, addedByParameter, addedOnParameter, modifiedByParameter, modifiedOnParameter, isActiveParameter, actionParameter, output, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<sp_OrderType_Result> sp_OrderType(Nullable<int> iD, string name, Nullable<int> addedBy, Nullable<System.DateTime> addedOn, Nullable<bool> isActive, string action, ObjectParameter output)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedOnParameter = addedOn.HasValue ?
                new ObjectParameter("AddedOn", addedOn) :
                new ObjectParameter("AddedOn", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_OrderType_Result>("sp_OrderType", iDParameter, nameParameter, addedByParameter, addedOnParameter, isActiveParameter, actionParameter, output);
        }
    
        public virtual ObjectResult<sp_StockTransfer_Result> sp_StockTransfer(Nullable<int> iD, Nullable<int> depuMasterId, Nullable<bool> isUnit, Nullable<int> unitMasterId, Nullable<int> categoryMasterId, Nullable<int> productMasterId, Nullable<int> typeOfOrderId, Nullable<int> qtyIssued, Nullable<int> addedBy, Nullable<System.DateTime> addedOn, Nullable<bool> isActive, string action, Nullable<int> depu_Id, Nullable<int> product_Id, Nullable<int> category_Id, Nullable<int> categoryTypeId, Nullable<int> category_TypeId, Nullable<int> indentId, string xMLData, Nullable<double> stockQty, Nullable<double> issueQty, Nullable<int> modifiedBy, Nullable<int> bID, ObjectParameter output)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var depuMasterIdParameter = depuMasterId.HasValue ?
                new ObjectParameter("DepuMasterId", depuMasterId) :
                new ObjectParameter("DepuMasterId", typeof(int));
    
            var isUnitParameter = isUnit.HasValue ?
                new ObjectParameter("IsUnit", isUnit) :
                new ObjectParameter("IsUnit", typeof(bool));
    
            var unitMasterIdParameter = unitMasterId.HasValue ?
                new ObjectParameter("UnitMasterId", unitMasterId) :
                new ObjectParameter("UnitMasterId", typeof(int));
    
            var categoryMasterIdParameter = categoryMasterId.HasValue ?
                new ObjectParameter("CategoryMasterId", categoryMasterId) :
                new ObjectParameter("CategoryMasterId", typeof(int));
    
            var productMasterIdParameter = productMasterId.HasValue ?
                new ObjectParameter("ProductMasterId", productMasterId) :
                new ObjectParameter("ProductMasterId", typeof(int));
    
            var typeOfOrderIdParameter = typeOfOrderId.HasValue ?
                new ObjectParameter("TypeOfOrderId", typeOfOrderId) :
                new ObjectParameter("TypeOfOrderId", typeof(int));
    
            var qtyIssuedParameter = qtyIssued.HasValue ?
                new ObjectParameter("QtyIssued", qtyIssued) :
                new ObjectParameter("QtyIssued", typeof(int));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedOnParameter = addedOn.HasValue ?
                new ObjectParameter("AddedOn", addedOn) :
                new ObjectParameter("AddedOn", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var depu_IdParameter = depu_Id.HasValue ?
                new ObjectParameter("Depu_Id", depu_Id) :
                new ObjectParameter("Depu_Id", typeof(int));
    
            var product_IdParameter = product_Id.HasValue ?
                new ObjectParameter("Product_Id", product_Id) :
                new ObjectParameter("Product_Id", typeof(int));
    
            var category_IdParameter = category_Id.HasValue ?
                new ObjectParameter("Category_Id", category_Id) :
                new ObjectParameter("Category_Id", typeof(int));
    
            var categoryTypeIdParameter = categoryTypeId.HasValue ?
                new ObjectParameter("CategoryTypeId", categoryTypeId) :
                new ObjectParameter("CategoryTypeId", typeof(int));
    
            var category_TypeIdParameter = category_TypeId.HasValue ?
                new ObjectParameter("Category_TypeId", category_TypeId) :
                new ObjectParameter("Category_TypeId", typeof(int));
    
            var indentIdParameter = indentId.HasValue ?
                new ObjectParameter("IndentId", indentId) :
                new ObjectParameter("IndentId", typeof(int));
    
            var xMLDataParameter = xMLData != null ?
                new ObjectParameter("XMLData", xMLData) :
                new ObjectParameter("XMLData", typeof(string));
    
            var stockQtyParameter = stockQty.HasValue ?
                new ObjectParameter("StockQty", stockQty) :
                new ObjectParameter("StockQty", typeof(double));
    
            var issueQtyParameter = issueQty.HasValue ?
                new ObjectParameter("IssueQty", issueQty) :
                new ObjectParameter("IssueQty", typeof(double));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var bIDParameter = bID.HasValue ?
                new ObjectParameter("BID", bID) :
                new ObjectParameter("BID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_StockTransfer_Result>("sp_StockTransfer", iDParameter, depuMasterIdParameter, isUnitParameter, unitMasterIdParameter, categoryMasterIdParameter, productMasterIdParameter, typeOfOrderIdParameter, qtyIssuedParameter, addedByParameter, addedOnParameter, isActiveParameter, actionParameter, depu_IdParameter, product_IdParameter, category_IdParameter, categoryTypeIdParameter, category_TypeIdParameter, indentIdParameter, xMLDataParameter, stockQtyParameter, issueQtyParameter, modifiedByParameter, bIDParameter, output);
        }
    
        public virtual ObjectResult<spcategorymaster_Result> spcategorymaster(Nullable<int> iD, string category_Code, string category_Name, Nullable<int> category_TypeId, string category_Desc, Nullable<int> parentCategory_Id, Nullable<bool> isActive, Nullable<System.DateTime> addedOn, Nullable<int> addedBy, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy, string action, ObjectParameter output)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var category_CodeParameter = category_Code != null ?
                new ObjectParameter("Category_Code", category_Code) :
                new ObjectParameter("Category_Code", typeof(string));
    
            var category_NameParameter = category_Name != null ?
                new ObjectParameter("Category_Name", category_Name) :
                new ObjectParameter("Category_Name", typeof(string));
    
            var category_TypeIdParameter = category_TypeId.HasValue ?
                new ObjectParameter("Category_TypeId", category_TypeId) :
                new ObjectParameter("Category_TypeId", typeof(int));
    
            var category_DescParameter = category_Desc != null ?
                new ObjectParameter("Category_Desc", category_Desc) :
                new ObjectParameter("Category_Desc", typeof(string));
    
            var parentCategory_IdParameter = parentCategory_Id.HasValue ?
                new ObjectParameter("ParentCategory_Id", parentCategory_Id) :
                new ObjectParameter("ParentCategory_Id", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var addedOnParameter = addedOn.HasValue ?
                new ObjectParameter("AddedOn", addedOn) :
                new ObjectParameter("AddedOn", typeof(System.DateTime));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spcategorymaster_Result>("spcategorymaster", iDParameter, category_CodeParameter, category_NameParameter, category_TypeIdParameter, category_DescParameter, parentCategory_IdParameter, isActiveParameter, addedOnParameter, addedByParameter, modifiedOnParameter, modifiedByParameter, actionParameter, output);
        }
    
        public virtual ObjectResult<spcategorytype_Result> spcategorytype(Nullable<int> iD, string type, string description, Nullable<bool> isActive, Nullable<System.DateTime> addedOn, Nullable<int> addedBy, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy, string action, ObjectParameter output, Nullable<bool> chkIsActive, string chkType)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var addedOnParameter = addedOn.HasValue ?
                new ObjectParameter("AddedOn", addedOn) :
                new ObjectParameter("AddedOn", typeof(System.DateTime));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var chkIsActiveParameter = chkIsActive.HasValue ?
                new ObjectParameter("chkIsActive", chkIsActive) :
                new ObjectParameter("chkIsActive", typeof(bool));
    
            var chkTypeParameter = chkType != null ?
                new ObjectParameter("chkType", chkType) :
                new ObjectParameter("chkType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spcategorytype_Result>("spcategorytype", iDParameter, typeParameter, descriptionParameter, isActiveParameter, addedOnParameter, addedByParameter, modifiedOnParameter, modifiedByParameter, actionParameter, output, chkIsActiveParameter, chkTypeParameter);
        }
    
        public virtual ObjectResult<spDepartment_Result> spDepartment(string action, Nullable<int> id, string deptName, string deptCode, string description, Nullable<System.DateTime> addedOn, Nullable<int> addedBy, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedby, Nullable<int> isActive, Nullable<int> roleID, ObjectParameter output)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var deptNameParameter = deptName != null ?
                new ObjectParameter("DeptName", deptName) :
                new ObjectParameter("DeptName", typeof(string));
    
            var deptCodeParameter = deptCode != null ?
                new ObjectParameter("DeptCode", deptCode) :
                new ObjectParameter("DeptCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var addedOnParameter = addedOn.HasValue ?
                new ObjectParameter("AddedOn", addedOn) :
                new ObjectParameter("AddedOn", typeof(System.DateTime));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedbyParameter = modifiedby.HasValue ?
                new ObjectParameter("Modifiedby", modifiedby) :
                new ObjectParameter("Modifiedby", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDepartment_Result>("spDepartment", actionParameter, idParameter, deptNameParameter, deptCodeParameter, descriptionParameter, addedOnParameter, addedByParameter, modifiedOnParameter, modifiedbyParameter, isActiveParameter, roleIDParameter, output);
        }
    
        public virtual ObjectResult<spDepu_Result> spDepu(Nullable<int> depu_Id, string depu_Name, string depu_Location, Nullable<bool> isActive, string depot_Code, Nullable<bool> isParent, Nullable<System.DateTime> addedOn, Nullable<int> addedBy, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy, string action, ObjectParameter output, string status, Nullable<int> uid, Nullable<bool> uidbool, Nullable<bool> chkIsParent, string chkDepu_Name, Nullable<int> commandId, Nullable<int> formationId, string corp, string depotNo, string unitName, string iDT, string iCT, string aWS)
        {
            var depu_IdParameter = depu_Id.HasValue ?
                new ObjectParameter("Depu_Id", depu_Id) :
                new ObjectParameter("Depu_Id", typeof(int));
    
            var depu_NameParameter = depu_Name != null ?
                new ObjectParameter("Depu_Name", depu_Name) :
                new ObjectParameter("Depu_Name", typeof(string));
    
            var depu_LocationParameter = depu_Location != null ?
                new ObjectParameter("Depu_Location", depu_Location) :
                new ObjectParameter("Depu_Location", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var depot_CodeParameter = depot_Code != null ?
                new ObjectParameter("Depot_Code", depot_Code) :
                new ObjectParameter("Depot_Code", typeof(string));
    
            var isParentParameter = isParent.HasValue ?
                new ObjectParameter("IsParent", isParent) :
                new ObjectParameter("IsParent", typeof(bool));
    
            var addedOnParameter = addedOn.HasValue ?
                new ObjectParameter("AddedOn", addedOn) :
                new ObjectParameter("AddedOn", typeof(System.DateTime));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("uid", uid) :
                new ObjectParameter("uid", typeof(int));
    
            var uidboolParameter = uidbool.HasValue ?
                new ObjectParameter("uidbool", uidbool) :
                new ObjectParameter("uidbool", typeof(bool));
    
            var chkIsParentParameter = chkIsParent.HasValue ?
                new ObjectParameter("chkIsParent", chkIsParent) :
                new ObjectParameter("chkIsParent", typeof(bool));
    
            var chkDepu_NameParameter = chkDepu_Name != null ?
                new ObjectParameter("chkDepu_Name", chkDepu_Name) :
                new ObjectParameter("chkDepu_Name", typeof(string));
    
            var commandIdParameter = commandId.HasValue ?
                new ObjectParameter("CommandId", commandId) :
                new ObjectParameter("CommandId", typeof(int));
    
            var formationIdParameter = formationId.HasValue ?
                new ObjectParameter("FormationId", formationId) :
                new ObjectParameter("FormationId", typeof(int));
    
            var corpParameter = corp != null ?
                new ObjectParameter("Corp", corp) :
                new ObjectParameter("Corp", typeof(string));
    
            var depotNoParameter = depotNo != null ?
                new ObjectParameter("DepotNo", depotNo) :
                new ObjectParameter("DepotNo", typeof(string));
    
            var unitNameParameter = unitName != null ?
                new ObjectParameter("UnitName", unitName) :
                new ObjectParameter("UnitName", typeof(string));
    
            var iDTParameter = iDT != null ?
                new ObjectParameter("IDT", iDT) :
                new ObjectParameter("IDT", typeof(string));
    
            var iCTParameter = iCT != null ?
                new ObjectParameter("ICT", iCT) :
                new ObjectParameter("ICT", typeof(string));
    
            var aWSParameter = aWS != null ?
                new ObjectParameter("AWS", aWS) :
                new ObjectParameter("AWS", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDepu_Result>("spDepu", depu_IdParameter, depu_NameParameter, depu_LocationParameter, isActiveParameter, depot_CodeParameter, isParentParameter, addedOnParameter, addedByParameter, modifiedOnParameter, modifiedByParameter, actionParameter, output, statusParameter, uidParameter, uidboolParameter, chkIsParentParameter, chkDepu_NameParameter, commandIdParameter, formationIdParameter, corpParameter, depotNoParameter, unitNameParameter, iDTParameter, iCTParameter, aWSParameter);
        }
    
        public virtual ObjectResult<spESLIssue_Result> spESLIssue(Nullable<int> eslID, Nullable<int> productID, string issueTo, string quantitytype, string quantity, Nullable<int> statusID, string remarksBynurGP, string remarksByjcoiGP, string remarksByjDSO, string overallRemarks, Nullable<System.DateTime> addedOn, Nullable<int> addedBy, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy, ObjectParameter output, Nullable<System.DateTime> sentOn, Nullable<System.DateTime> recievedDate, Nullable<bool> isActive, Nullable<int> pID, Nullable<int> sID, Nullable<decimal> stockqty, string isProductStatus, string action, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<bool> isSentto, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string approvedId, Nullable<int> bid)
        {
            var eslIDParameter = eslID.HasValue ?
                new ObjectParameter("EslID", eslID) :
                new ObjectParameter("EslID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var issueToParameter = issueTo != null ?
                new ObjectParameter("IssueTo", issueTo) :
                new ObjectParameter("IssueTo", typeof(string));
    
            var quantitytypeParameter = quantitytype != null ?
                new ObjectParameter("Quantitytype", quantitytype) :
                new ObjectParameter("Quantitytype", typeof(string));
    
            var quantityParameter = quantity != null ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var remarksBynurGPParameter = remarksBynurGP != null ?
                new ObjectParameter("RemarksBynurGP", remarksBynurGP) :
                new ObjectParameter("RemarksBynurGP", typeof(string));
    
            var remarksByjcoiGPParameter = remarksByjcoiGP != null ?
                new ObjectParameter("RemarksByjcoiGP", remarksByjcoiGP) :
                new ObjectParameter("RemarksByjcoiGP", typeof(string));
    
            var remarksByjDSOParameter = remarksByjDSO != null ?
                new ObjectParameter("RemarksByjDSO", remarksByjDSO) :
                new ObjectParameter("RemarksByjDSO", typeof(string));
    
            var overallRemarksParameter = overallRemarks != null ?
                new ObjectParameter("OverallRemarks", overallRemarks) :
                new ObjectParameter("OverallRemarks", typeof(string));
    
            var addedOnParameter = addedOn.HasValue ?
                new ObjectParameter("AddedOn", addedOn) :
                new ObjectParameter("AddedOn", typeof(System.DateTime));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var sentOnParameter = sentOn.HasValue ?
                new ObjectParameter("SentOn", sentOn) :
                new ObjectParameter("SentOn", typeof(System.DateTime));
    
            var recievedDateParameter = recievedDate.HasValue ?
                new ObjectParameter("RecievedDate", recievedDate) :
                new ObjectParameter("RecievedDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pIDParameter = pID.HasValue ?
                new ObjectParameter("PID", pID) :
                new ObjectParameter("PID", typeof(int));
    
            var sIDParameter = sID.HasValue ?
                new ObjectParameter("SID", sID) :
                new ObjectParameter("SID", typeof(int));
    
            var stockqtyParameter = stockqty.HasValue ?
                new ObjectParameter("Stockqty", stockqty) :
                new ObjectParameter("Stockqty", typeof(decimal));
    
            var isProductStatusParameter = isProductStatus != null ?
                new ObjectParameter("IsProductStatus", isProductStatus) :
                new ObjectParameter("IsProductStatus", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var isSenttoParameter = isSentto.HasValue ?
                new ObjectParameter("IsSentto", isSentto) :
                new ObjectParameter("IsSentto", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var approvedIdParameter = approvedId != null ?
                new ObjectParameter("ApprovedId", approvedId) :
                new ObjectParameter("ApprovedId", typeof(string));
    
            var bidParameter = bid.HasValue ?
                new ObjectParameter("Bid", bid) :
                new ObjectParameter("Bid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spESLIssue_Result>("spESLIssue", eslIDParameter, productIDParameter, issueToParameter, quantitytypeParameter, quantityParameter, statusIDParameter, remarksBynurGPParameter, remarksByjcoiGPParameter, remarksByjDSOParameter, overallRemarksParameter, addedOnParameter, addedByParameter, modifiedOnParameter, modifiedByParameter, output, sentOnParameter, recievedDateParameter, isActiveParameter, pIDParameter, sIDParameter, stockqtyParameter, isProductStatusParameter, actionParameter, fromdateParameter, todateParameter, isSenttoParameter, startDateParameter, endDateParameter, approvedIdParameter, bidParameter);
        }
    
        public virtual ObjectResult<speslstatus_Result> speslstatus(string action, Nullable<int> iD)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<speslstatus_Result>("speslstatus", actionParameter, iDParameter);
        }
    
        public virtual ObjectResult<spExpenseVoucherList_Result> spExpenseVoucherList(string action, Nullable<int> bID, string iDs)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var bIDParameter = bID.HasValue ?
                new ObjectParameter("BID", bID) :
                new ObjectParameter("BID", typeof(int));
    
            var iDsParameter = iDs != null ?
                new ObjectParameter("IDs", iDs) :
                new ObjectParameter("IDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spExpenseVoucherList_Result>("spExpenseVoucherList", actionParameter, bIDParameter, iDsParameter);
        }
    
        public virtual ObjectResult<spExpenseVoucherSummary_Result> spExpenseVoucherSummary(string action, Nullable<int> id)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spExpenseVoucherSummary_Result>("spExpenseVoucherSummary", actionParameter, idParameter);
        }
    
        public virtual ObjectResult<spGetBatchByProduct_Result> spGetBatchByProduct(Nullable<int> pID)
        {
            var pIDParameter = pID.HasValue ?
                new ObjectParameter("PID", pID) :
                new ObjectParameter("PID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetBatchByProduct_Result>("spGetBatchByProduct", pIDParameter);
        }
    
        public virtual ObjectResult<SpGetIDTRecord_Result> SpGetIDTRecord(string action, Nullable<int> iDT)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDTParameter = iDT.HasValue ?
                new ObjectParameter("IDT", iDT) :
                new ObjectParameter("IDT", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetIDTRecord_Result>("SpGetIDTRecord", actionParameter, iDTParameter);
        }
    
        public virtual ObjectResult<spGetIssuedIDT_Result> spGetIssuedIDT(Nullable<int> pID, Nullable<int> dID, Nullable<int> qID)
        {
            var pIDParameter = pID.HasValue ?
                new ObjectParameter("pID", pID) :
                new ObjectParameter("pID", typeof(int));
    
            var dIDParameter = dID.HasValue ?
                new ObjectParameter("dID", dID) :
                new ObjectParameter("dID", typeof(int));
    
            var qIDParameter = qID.HasValue ?
                new ObjectParameter("qID", qID) :
                new ObjectParameter("qID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetIssuedIDT_Result>("spGetIssuedIDT", pIDParameter, dIDParameter, qIDParameter);
        }
    
        public virtual ObjectResult<spGetWareHouseSections_Result> spGetWareHouseSections(string action)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetWareHouseSections_Result>("spGetWareHouseSections", actionParameter);
        }
    
        public virtual int spIDTStockTranfer(Nullable<int> sID, Nullable<int> batchId, Nullable<int> iDTId, string packingType, Nullable<decimal> quantity, string format, Nullable<int> toLooseCount)
        {
            var sIDParameter = sID.HasValue ?
                new ObjectParameter("SID", sID) :
                new ObjectParameter("SID", typeof(int));
    
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("BatchId", batchId) :
                new ObjectParameter("BatchId", typeof(int));
    
            var iDTIdParameter = iDTId.HasValue ?
                new ObjectParameter("IDTId", iDTId) :
                new ObjectParameter("IDTId", typeof(int));
    
            var packingTypeParameter = packingType != null ?
                new ObjectParameter("PackingType", packingType) :
                new ObjectParameter("PackingType", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var formatParameter = format != null ?
                new ObjectParameter("Format", format) :
                new ObjectParameter("Format", typeof(string));
    
            var toLooseCountParameter = toLooseCount.HasValue ?
                new ObjectParameter("ToLooseCount", toLooseCount) :
                new ObjectParameter("ToLooseCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spIDTStockTranfer", sIDParameter, batchIdParameter, iDTIdParameter, packingTypeParameter, quantityParameter, formatParameter, toLooseCountParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SPINDENT(Nullable<int> id, string indentName, Nullable<bool> isApproved, Nullable<bool> isIssueVoucherId, Nullable<int> addedBy, Nullable<System.DateTime> addedOn, Nullable<int> modifiedBy, Nullable<int> modifiedOn, Nullable<bool> isActive, string action, ObjectParameter output, Nullable<int> indentid, Nullable<int> idt)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var indentNameParameter = indentName != null ?
                new ObjectParameter("IndentName", indentName) :
                new ObjectParameter("IndentName", typeof(string));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var isIssueVoucherIdParameter = isIssueVoucherId.HasValue ?
                new ObjectParameter("IsIssueVoucherId", isIssueVoucherId) :
                new ObjectParameter("IsIssueVoucherId", typeof(bool));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedOnParameter = addedOn.HasValue ?
                new ObjectParameter("AddedOn", addedOn) :
                new ObjectParameter("AddedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var indentidParameter = indentid.HasValue ?
                new ObjectParameter("indentid", indentid) :
                new ObjectParameter("indentid", typeof(int));
    
            var idtParameter = idt.HasValue ?
                new ObjectParameter("idt", idt) :
                new ObjectParameter("idt", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SPINDENT", idParameter, indentNameParameter, isApprovedParameter, isIssueVoucherIdParameter, addedByParameter, addedOnParameter, modifiedByParameter, modifiedOnParameter, isActiveParameter, actionParameter, output, indentidParameter, idtParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spIssueVoucherVehicleUpdate(string issueVoucherId, Nullable<int> productId, string vehicleNo, Nullable<decimal> stockQuantity, string formatFull, string formatLoose, string batchNo, Nullable<int> issueorderid, Nullable<int> id, ObjectParameter intResult)
        {
            var issueVoucherIdParameter = issueVoucherId != null ?
                new ObjectParameter("IssueVoucherId", issueVoucherId) :
                new ObjectParameter("IssueVoucherId", typeof(string));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var vehicleNoParameter = vehicleNo != null ?
                new ObjectParameter("VehicleNo", vehicleNo) :
                new ObjectParameter("VehicleNo", typeof(string));
    
            var stockQuantityParameter = stockQuantity.HasValue ?
                new ObjectParameter("StockQuantity", stockQuantity) :
                new ObjectParameter("StockQuantity", typeof(decimal));
    
            var formatFullParameter = formatFull != null ?
                new ObjectParameter("FormatFull", formatFull) :
                new ObjectParameter("FormatFull", typeof(string));
    
            var formatLooseParameter = formatLoose != null ?
                new ObjectParameter("FormatLoose", formatLoose) :
                new ObjectParameter("FormatLoose", typeof(string));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var issueorderidParameter = issueorderid.HasValue ?
                new ObjectParameter("issueorderid", issueorderid) :
                new ObjectParameter("issueorderid", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spIssueVoucherVehicleUpdate", issueVoucherIdParameter, productIdParameter, vehicleNoParameter, stockQuantityParameter, formatFullParameter, formatLooseParameter, batchNoParameter, issueorderidParameter, idParameter, intResult);
        }
    
        public virtual ObjectResult<spLPCPList_Result> spLPCPList(string action, Nullable<int> isATNo, Nullable<int> iD, Nullable<int> status, Nullable<int> tender, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> late, Nullable<int> dispute, string aTNO, string sONO, Nullable<int> productID)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var isATNoParameter = isATNo.HasValue ?
                new ObjectParameter("IsATNo", isATNo) :
                new ObjectParameter("IsATNo", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var tenderParameter = tender.HasValue ?
                new ObjectParameter("Tender", tender) :
                new ObjectParameter("Tender", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var lateParameter = late.HasValue ?
                new ObjectParameter("Late", late) :
                new ObjectParameter("Late", typeof(int));
    
            var disputeParameter = dispute.HasValue ?
                new ObjectParameter("Dispute", dispute) :
                new ObjectParameter("Dispute", typeof(int));
    
            var aTNOParameter = aTNO != null ?
                new ObjectParameter("ATNO", aTNO) :
                new ObjectParameter("ATNO", typeof(string));
    
            var sONOParameter = sONO != null ?
                new ObjectParameter("SONO", sONO) :
                new ObjectParameter("SONO", typeof(string));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spLPCPList_Result>("spLPCPList", actionParameter, isATNoParameter, iDParameter, statusParameter, tenderParameter, fromDateParameter, toDateParameter, lateParameter, disputeParameter, aTNOParameter, sONOParameter, productIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spManageBatch(string action, Nullable<int> id)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spManageBatch", actionParameter, idParameter);
        }
    
        public virtual ObjectResult<spManageStock_Result> spManageStock(Nullable<int> bID, Nullable<int> pID, Nullable<int> sID, Nullable<int> depotID, Nullable<System.DateTime> mFGDate, Nullable<System.DateTime> eXPDate, string recievedFrom, Nullable<bool> isActive, Nullable<bool> isStockIn, Nullable<bool> isDeleted, string minQuantity, string quantitytype, string quantity, string batchName, string batchCode, string batchDesc, Nullable<System.DateTime> addedOn, Nullable<int> addedBy, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy, string action, Nullable<System.DateTime> eSL, string batchNo, string aTNo, string vechicleNo, ObjectParameter output, Nullable<decimal> stockqty, string isProductStatus, Nullable<bool> isSentto, string productname, Nullable<decimal> stockqtyrem, Nullable<int> supplierId, string genericName, string originalManf, Nullable<decimal> sentQty, Nullable<System.DateTime> recievedOn, string driverName, Nullable<int> interTransferId, string remarks, string challanOrIrNo, Nullable<bool> isChallanNo, Nullable<bool> isIrNo, string packingMaterial, Nullable<int> isSampleSent, string unitInfo)
        {
            var bIDParameter = bID.HasValue ?
                new ObjectParameter("BID", bID) :
                new ObjectParameter("BID", typeof(int));
    
            var pIDParameter = pID.HasValue ?
                new ObjectParameter("PID", pID) :
                new ObjectParameter("PID", typeof(int));
    
            var sIDParameter = sID.HasValue ?
                new ObjectParameter("SID", sID) :
                new ObjectParameter("SID", typeof(int));
    
            var depotIDParameter = depotID.HasValue ?
                new ObjectParameter("DepotID", depotID) :
                new ObjectParameter("DepotID", typeof(int));
    
            var mFGDateParameter = mFGDate.HasValue ?
                new ObjectParameter("MFGDate", mFGDate) :
                new ObjectParameter("MFGDate", typeof(System.DateTime));
    
            var eXPDateParameter = eXPDate.HasValue ?
                new ObjectParameter("EXPDate", eXPDate) :
                new ObjectParameter("EXPDate", typeof(System.DateTime));
    
            var recievedFromParameter = recievedFrom != null ?
                new ObjectParameter("RecievedFrom", recievedFrom) :
                new ObjectParameter("RecievedFrom", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isStockInParameter = isStockIn.HasValue ?
                new ObjectParameter("IsStockIn", isStockIn) :
                new ObjectParameter("IsStockIn", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var minQuantityParameter = minQuantity != null ?
                new ObjectParameter("MinQuantity", minQuantity) :
                new ObjectParameter("MinQuantity", typeof(string));
    
            var quantitytypeParameter = quantitytype != null ?
                new ObjectParameter("Quantitytype", quantitytype) :
                new ObjectParameter("Quantitytype", typeof(string));
    
            var quantityParameter = quantity != null ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(string));
    
            var batchNameParameter = batchName != null ?
                new ObjectParameter("BatchName", batchName) :
                new ObjectParameter("BatchName", typeof(string));
    
            var batchCodeParameter = batchCode != null ?
                new ObjectParameter("BatchCode", batchCode) :
                new ObjectParameter("BatchCode", typeof(string));
    
            var batchDescParameter = batchDesc != null ?
                new ObjectParameter("BatchDesc", batchDesc) :
                new ObjectParameter("BatchDesc", typeof(string));
    
            var addedOnParameter = addedOn.HasValue ?
                new ObjectParameter("AddedOn", addedOn) :
                new ObjectParameter("AddedOn", typeof(System.DateTime));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var eSLParameter = eSL.HasValue ?
                new ObjectParameter("ESL", eSL) :
                new ObjectParameter("ESL", typeof(System.DateTime));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var aTNoParameter = aTNo != null ?
                new ObjectParameter("ATNo", aTNo) :
                new ObjectParameter("ATNo", typeof(string));
    
            var vechicleNoParameter = vechicleNo != null ?
                new ObjectParameter("VechicleNo", vechicleNo) :
                new ObjectParameter("VechicleNo", typeof(string));
    
            var stockqtyParameter = stockqty.HasValue ?
                new ObjectParameter("Stockqty", stockqty) :
                new ObjectParameter("Stockqty", typeof(decimal));
    
            var isProductStatusParameter = isProductStatus != null ?
                new ObjectParameter("IsProductStatus", isProductStatus) :
                new ObjectParameter("IsProductStatus", typeof(string));
    
            var isSenttoParameter = isSentto.HasValue ?
                new ObjectParameter("IsSentto", isSentto) :
                new ObjectParameter("IsSentto", typeof(bool));
    
            var productnameParameter = productname != null ?
                new ObjectParameter("Productname", productname) :
                new ObjectParameter("Productname", typeof(string));
    
            var stockqtyremParameter = stockqtyrem.HasValue ?
                new ObjectParameter("Stockqtyrem", stockqtyrem) :
                new ObjectParameter("Stockqtyrem", typeof(decimal));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var genericNameParameter = genericName != null ?
                new ObjectParameter("GenericName", genericName) :
                new ObjectParameter("GenericName", typeof(string));
    
            var originalManfParameter = originalManf != null ?
                new ObjectParameter("OriginalManf", originalManf) :
                new ObjectParameter("OriginalManf", typeof(string));
    
            var sentQtyParameter = sentQty.HasValue ?
                new ObjectParameter("SentQty", sentQty) :
                new ObjectParameter("SentQty", typeof(decimal));
    
            var recievedOnParameter = recievedOn.HasValue ?
                new ObjectParameter("RecievedOn", recievedOn) :
                new ObjectParameter("RecievedOn", typeof(System.DateTime));
    
            var driverNameParameter = driverName != null ?
                new ObjectParameter("DriverName", driverName) :
                new ObjectParameter("DriverName", typeof(string));
    
            var interTransferIdParameter = interTransferId.HasValue ?
                new ObjectParameter("InterTransferId", interTransferId) :
                new ObjectParameter("InterTransferId", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var challanOrIrNoParameter = challanOrIrNo != null ?
                new ObjectParameter("ChallanOrIrNo", challanOrIrNo) :
                new ObjectParameter("ChallanOrIrNo", typeof(string));
    
            var isChallanNoParameter = isChallanNo.HasValue ?
                new ObjectParameter("IsChallanNo", isChallanNo) :
                new ObjectParameter("IsChallanNo", typeof(bool));
    
            var isIrNoParameter = isIrNo.HasValue ?
                new ObjectParameter("IsIrNo", isIrNo) :
                new ObjectParameter("IsIrNo", typeof(bool));
    
            var packingMaterialParameter = packingMaterial != null ?
                new ObjectParameter("PackingMaterial", packingMaterial) :
                new ObjectParameter("PackingMaterial", typeof(string));
    
            var isSampleSentParameter = isSampleSent.HasValue ?
                new ObjectParameter("IsSampleSent", isSampleSent) :
                new ObjectParameter("IsSampleSent", typeof(int));
    
            var unitInfoParameter = unitInfo != null ?
                new ObjectParameter("UnitInfo", unitInfo) :
                new ObjectParameter("UnitInfo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spManageStock_Result>("spManageStock", bIDParameter, pIDParameter, sIDParameter, depotIDParameter, mFGDateParameter, eXPDateParameter, recievedFromParameter, isActiveParameter, isStockInParameter, isDeletedParameter, minQuantityParameter, quantitytypeParameter, quantityParameter, batchNameParameter, batchCodeParameter, batchDescParameter, addedOnParameter, addedByParameter, modifiedOnParameter, modifiedByParameter, actionParameter, eSLParameter, batchNoParameter, aTNoParameter, vechicleNoParameter, output, stockqtyParameter, isProductStatusParameter, isSenttoParameter, productnameParameter, stockqtyremParameter, supplierIdParameter, genericNameParameter, originalManfParameter, sentQtyParameter, recievedOnParameter, driverNameParameter, interTransferIdParameter, remarksParameter, challanOrIrNoParameter, isChallanNoParameter, isIrNoParameter, packingMaterialParameter, isSampleSentParameter, unitInfoParameter);
        }
    
        public virtual ObjectResult<spProduct_Result> spProduct(Nullable<int> product_ID, string product_Name, string product_Desc, string short_Product_Desc, string admin_remarks, Nullable<int> product_Cost, string product_Code, Nullable<bool> isActive, Nullable<int> category_Id, Nullable<System.DateTime> addedOn, Nullable<int> addedBy, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy, Nullable<decimal> stockQty, string action, ObjectParameter output, string cat, string productUnit, Nullable<decimal> gSServe)
        {
            var product_IDParameter = product_ID.HasValue ?
                new ObjectParameter("Product_ID", product_ID) :
                new ObjectParameter("Product_ID", typeof(int));
    
            var product_NameParameter = product_Name != null ?
                new ObjectParameter("Product_Name", product_Name) :
                new ObjectParameter("Product_Name", typeof(string));
    
            var product_DescParameter = product_Desc != null ?
                new ObjectParameter("Product_Desc", product_Desc) :
                new ObjectParameter("Product_Desc", typeof(string));
    
            var short_Product_DescParameter = short_Product_Desc != null ?
                new ObjectParameter("Short_Product_Desc", short_Product_Desc) :
                new ObjectParameter("Short_Product_Desc", typeof(string));
    
            var admin_remarksParameter = admin_remarks != null ?
                new ObjectParameter("Admin_remarks", admin_remarks) :
                new ObjectParameter("Admin_remarks", typeof(string));
    
            var product_CostParameter = product_Cost.HasValue ?
                new ObjectParameter("Product_Cost", product_Cost) :
                new ObjectParameter("Product_Cost", typeof(int));
    
            var product_CodeParameter = product_Code != null ?
                new ObjectParameter("Product_Code", product_Code) :
                new ObjectParameter("Product_Code", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var category_IdParameter = category_Id.HasValue ?
                new ObjectParameter("Category_Id", category_Id) :
                new ObjectParameter("Category_Id", typeof(int));
    
            var addedOnParameter = addedOn.HasValue ?
                new ObjectParameter("AddedOn", addedOn) :
                new ObjectParameter("AddedOn", typeof(System.DateTime));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var stockQtyParameter = stockQty.HasValue ?
                new ObjectParameter("StockQty", stockQty) :
                new ObjectParameter("StockQty", typeof(decimal));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var catParameter = cat != null ?
                new ObjectParameter("cat", cat) :
                new ObjectParameter("cat", typeof(string));
    
            var productUnitParameter = productUnit != null ?
                new ObjectParameter("ProductUnit", productUnit) :
                new ObjectParameter("ProductUnit", typeof(string));
    
            var gSServeParameter = gSServe.HasValue ?
                new ObjectParameter("GSServe", gSServe) :
                new ObjectParameter("GSServe", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spProduct_Result>("spProduct", product_IDParameter, product_NameParameter, product_DescParameter, short_Product_DescParameter, admin_remarksParameter, product_CostParameter, product_CodeParameter, isActiveParameter, category_IdParameter, addedOnParameter, addedByParameter, modifiedOnParameter, modifiedByParameter, stockQtyParameter, actionParameter, output, catParameter, productUnitParameter, gSServeParameter);
        }
    
        public virtual ObjectResult<spRole_Result> spRole(Nullable<int> role_Id, string role_Code, string role, string role_Desc, Nullable<bool> isActive, Nullable<System.DateTime> addedOn, Nullable<int> addedBy, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy, string action, Nullable<int> deptId, Nullable<int> rank, ObjectParameter output)
        {
            var role_IdParameter = role_Id.HasValue ?
                new ObjectParameter("Role_Id", role_Id) :
                new ObjectParameter("Role_Id", typeof(int));
    
            var role_CodeParameter = role_Code != null ?
                new ObjectParameter("Role_Code", role_Code) :
                new ObjectParameter("Role_Code", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var role_DescParameter = role_Desc != null ?
                new ObjectParameter("Role_Desc", role_Desc) :
                new ObjectParameter("Role_Desc", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var addedOnParameter = addedOn.HasValue ?
                new ObjectParameter("AddedOn", addedOn) :
                new ObjectParameter("AddedOn", typeof(System.DateTime));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var deptIdParameter = deptId.HasValue ?
                new ObjectParameter("DeptId", deptId) :
                new ObjectParameter("DeptId", typeof(int));
    
            var rankParameter = rank.HasValue ?
                new ObjectParameter("Rank", rank) :
                new ObjectParameter("Rank", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRole_Result>("spRole", role_IdParameter, role_CodeParameter, roleParameter, role_DescParameter, isActiveParameter, addedOnParameter, addedByParameter, modifiedOnParameter, modifiedByParameter, actionParameter, deptIdParameter, rankParameter, output);
        }
    
        public virtual ObjectResult<spselectcrv_Result> spselectcrv(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spselectcrv_Result>("spselectcrv", fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<spSelectTranfer_Result> spSelectTranfer(string action, Nullable<int> issuOrderID, Nullable<int> id, Nullable<int> productID, string batchNo, Nullable<int> catID)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var issuOrderIDParameter = issuOrderID.HasValue ?
                new ObjectParameter("IssuOrderID", issuOrderID) :
                new ObjectParameter("IssuOrderID", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var catIDParameter = catID.HasValue ?
                new ObjectParameter("CatID", catID) :
                new ObjectParameter("CatID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelectTranfer_Result>("spSelectTranfer", actionParameter, issuOrderIDParameter, idParameter, productIDParameter, batchNoParameter, catIDParameter);
        }
    
        public virtual ObjectResult<spStock_Result> spStock(Nullable<int> id, string iDs, Nullable<int> sID, Nullable<int> isChallanNo, Nullable<int> isIrNo, Nullable<decimal> weight, string aTNo, string supplierNo, string cRVNo, string recievedFrom, Nullable<int> pMGradeId, Nullable<int> pMCapacityId, Nullable<int> pMConditionId, string otherSupplier, string transferedBy, Nullable<bool> sampleSent, string contactNo, string challanOrIR, string challanOrIRNo, Nullable<int> productId, string originalMfg, string genericName, Nullable<decimal> costOfParticular, Nullable<System.DateTime> recievedDate, string packagingMaterialName, string packagingMaterialShape, string packagingMaterialSize, Nullable<decimal> packagingMaterialFormatLevel, string remarks, Nullable<int> addedBy, Nullable<System.DateTime> addedOn, Nullable<System.DateTime> session, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedOn, string packingMaterialFormat, string weigthUnit, string shapeUnit, Nullable<bool> isEmptyPM, Nullable<int> isWithoutPacking, Nullable<bool> isSubPacking, Nullable<bool> isDW, string subPMName, Nullable<int> subPMGradeId, Nullable<int> subPMCapacityId, Nullable<int> subPMConditionId, string subPMShape, string subPMSize, Nullable<decimal> subWeight, string subWeightUnit, string subShapeUnit, Nullable<int> bID, Nullable<int> stockId, string batchNo, string warehouseNo, Nullable<System.DateTime> mfgDate, Nullable<System.DateTime> expiryDate, Nullable<System.DateTime> eSLDate, Nullable<decimal> cost, Nullable<decimal> sampleSentQty, Nullable<decimal> bWeight, Nullable<decimal> weightofParticular, string weightUnit, Nullable<int> warehouseID, Nullable<int> sectionID, Nullable<int> sectionRows, Nullable<int> sectionCol, string driverName, string vehicleNo, Nullable<int> stockBatchId, Nullable<decimal> sentQty, Nullable<decimal> recievedQty, string challanNo, string isDDOrCHT, Nullable<decimal> spilledQty, Nullable<decimal> damagedBoxes, Nullable<decimal> spillageAffected, Nullable<decimal> sampleAffected, Nullable<decimal> bothAffected, string packagingType, Nullable<decimal> remainingQty, string format, string action, ObjectParameter output)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var iDsParameter = iDs != null ?
                new ObjectParameter("IDs", iDs) :
                new ObjectParameter("IDs", typeof(string));
    
            var sIDParameter = sID.HasValue ?
                new ObjectParameter("SID", sID) :
                new ObjectParameter("SID", typeof(int));
    
            var isChallanNoParameter = isChallanNo.HasValue ?
                new ObjectParameter("IsChallanNo", isChallanNo) :
                new ObjectParameter("IsChallanNo", typeof(int));
    
            var isIrNoParameter = isIrNo.HasValue ?
                new ObjectParameter("IsIrNo", isIrNo) :
                new ObjectParameter("IsIrNo", typeof(int));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(decimal));
    
            var aTNoParameter = aTNo != null ?
                new ObjectParameter("ATNo", aTNo) :
                new ObjectParameter("ATNo", typeof(string));
    
            var supplierNoParameter = supplierNo != null ?
                new ObjectParameter("SupplierNo", supplierNo) :
                new ObjectParameter("SupplierNo", typeof(string));
    
            var cRVNoParameter = cRVNo != null ?
                new ObjectParameter("CRVNo", cRVNo) :
                new ObjectParameter("CRVNo", typeof(string));
    
            var recievedFromParameter = recievedFrom != null ?
                new ObjectParameter("RecievedFrom", recievedFrom) :
                new ObjectParameter("RecievedFrom", typeof(string));
    
            var pMGradeIdParameter = pMGradeId.HasValue ?
                new ObjectParameter("PMGradeId", pMGradeId) :
                new ObjectParameter("PMGradeId", typeof(int));
    
            var pMCapacityIdParameter = pMCapacityId.HasValue ?
                new ObjectParameter("PMCapacityId", pMCapacityId) :
                new ObjectParameter("PMCapacityId", typeof(int));
    
            var pMConditionIdParameter = pMConditionId.HasValue ?
                new ObjectParameter("PMConditionId", pMConditionId) :
                new ObjectParameter("PMConditionId", typeof(int));
    
            var otherSupplierParameter = otherSupplier != null ?
                new ObjectParameter("OtherSupplier", otherSupplier) :
                new ObjectParameter("OtherSupplier", typeof(string));
    
            var transferedByParameter = transferedBy != null ?
                new ObjectParameter("TransferedBy", transferedBy) :
                new ObjectParameter("TransferedBy", typeof(string));
    
            var sampleSentParameter = sampleSent.HasValue ?
                new ObjectParameter("SampleSent", sampleSent) :
                new ObjectParameter("SampleSent", typeof(bool));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var challanOrIRParameter = challanOrIR != null ?
                new ObjectParameter("ChallanOrIR", challanOrIR) :
                new ObjectParameter("ChallanOrIR", typeof(string));
    
            var challanOrIRNoParameter = challanOrIRNo != null ?
                new ObjectParameter("ChallanOrIRNo", challanOrIRNo) :
                new ObjectParameter("ChallanOrIRNo", typeof(string));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var originalMfgParameter = originalMfg != null ?
                new ObjectParameter("OriginalMfg", originalMfg) :
                new ObjectParameter("OriginalMfg", typeof(string));
    
            var genericNameParameter = genericName != null ?
                new ObjectParameter("GenericName", genericName) :
                new ObjectParameter("GenericName", typeof(string));
    
            var costOfParticularParameter = costOfParticular.HasValue ?
                new ObjectParameter("CostOfParticular", costOfParticular) :
                new ObjectParameter("CostOfParticular", typeof(decimal));
    
            var recievedDateParameter = recievedDate.HasValue ?
                new ObjectParameter("RecievedDate", recievedDate) :
                new ObjectParameter("RecievedDate", typeof(System.DateTime));
    
            var packagingMaterialNameParameter = packagingMaterialName != null ?
                new ObjectParameter("PackagingMaterialName", packagingMaterialName) :
                new ObjectParameter("PackagingMaterialName", typeof(string));
    
            var packagingMaterialShapeParameter = packagingMaterialShape != null ?
                new ObjectParameter("PackagingMaterialShape", packagingMaterialShape) :
                new ObjectParameter("PackagingMaterialShape", typeof(string));
    
            var packagingMaterialSizeParameter = packagingMaterialSize != null ?
                new ObjectParameter("PackagingMaterialSize", packagingMaterialSize) :
                new ObjectParameter("PackagingMaterialSize", typeof(string));
    
            var packagingMaterialFormatLevelParameter = packagingMaterialFormatLevel.HasValue ?
                new ObjectParameter("PackagingMaterialFormatLevel", packagingMaterialFormatLevel) :
                new ObjectParameter("PackagingMaterialFormatLevel", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedOnParameter = addedOn.HasValue ?
                new ObjectParameter("AddedOn", addedOn) :
                new ObjectParameter("AddedOn", typeof(System.DateTime));
    
            var sessionParameter = session.HasValue ?
                new ObjectParameter("Session", session) :
                new ObjectParameter("Session", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var packingMaterialFormatParameter = packingMaterialFormat != null ?
                new ObjectParameter("PackingMaterialFormat", packingMaterialFormat) :
                new ObjectParameter("PackingMaterialFormat", typeof(string));
    
            var weigthUnitParameter = weigthUnit != null ?
                new ObjectParameter("WeigthUnit", weigthUnit) :
                new ObjectParameter("WeigthUnit", typeof(string));
    
            var shapeUnitParameter = shapeUnit != null ?
                new ObjectParameter("ShapeUnit", shapeUnit) :
                new ObjectParameter("ShapeUnit", typeof(string));
    
            var isEmptyPMParameter = isEmptyPM.HasValue ?
                new ObjectParameter("IsEmptyPM", isEmptyPM) :
                new ObjectParameter("IsEmptyPM", typeof(bool));
    
            var isWithoutPackingParameter = isWithoutPacking.HasValue ?
                new ObjectParameter("IsWithoutPacking", isWithoutPacking) :
                new ObjectParameter("IsWithoutPacking", typeof(int));
    
            var isSubPackingParameter = isSubPacking.HasValue ?
                new ObjectParameter("IsSubPacking", isSubPacking) :
                new ObjectParameter("IsSubPacking", typeof(bool));
    
            var isDWParameter = isDW.HasValue ?
                new ObjectParameter("IsDW", isDW) :
                new ObjectParameter("IsDW", typeof(bool));
    
            var subPMNameParameter = subPMName != null ?
                new ObjectParameter("SubPMName", subPMName) :
                new ObjectParameter("SubPMName", typeof(string));
    
            var subPMGradeIdParameter = subPMGradeId.HasValue ?
                new ObjectParameter("SubPMGradeId", subPMGradeId) :
                new ObjectParameter("SubPMGradeId", typeof(int));
    
            var subPMCapacityIdParameter = subPMCapacityId.HasValue ?
                new ObjectParameter("SubPMCapacityId", subPMCapacityId) :
                new ObjectParameter("SubPMCapacityId", typeof(int));
    
            var subPMConditionIdParameter = subPMConditionId.HasValue ?
                new ObjectParameter("SubPMConditionId", subPMConditionId) :
                new ObjectParameter("SubPMConditionId", typeof(int));
    
            var subPMShapeParameter = subPMShape != null ?
                new ObjectParameter("SubPMShape", subPMShape) :
                new ObjectParameter("SubPMShape", typeof(string));
    
            var subPMSizeParameter = subPMSize != null ?
                new ObjectParameter("SubPMSize", subPMSize) :
                new ObjectParameter("SubPMSize", typeof(string));
    
            var subWeightParameter = subWeight.HasValue ?
                new ObjectParameter("SubWeight", subWeight) :
                new ObjectParameter("SubWeight", typeof(decimal));
    
            var subWeightUnitParameter = subWeightUnit != null ?
                new ObjectParameter("SubWeightUnit", subWeightUnit) :
                new ObjectParameter("SubWeightUnit", typeof(string));
    
            var subShapeUnitParameter = subShapeUnit != null ?
                new ObjectParameter("SubShapeUnit", subShapeUnit) :
                new ObjectParameter("SubShapeUnit", typeof(string));
    
            var bIDParameter = bID.HasValue ?
                new ObjectParameter("BID", bID) :
                new ObjectParameter("BID", typeof(int));
    
            var stockIdParameter = stockId.HasValue ?
                new ObjectParameter("StockId", stockId) :
                new ObjectParameter("StockId", typeof(int));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var warehouseNoParameter = warehouseNo != null ?
                new ObjectParameter("WarehouseNo", warehouseNo) :
                new ObjectParameter("WarehouseNo", typeof(string));
    
            var mfgDateParameter = mfgDate.HasValue ?
                new ObjectParameter("MfgDate", mfgDate) :
                new ObjectParameter("MfgDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var eSLDateParameter = eSLDate.HasValue ?
                new ObjectParameter("ESLDate", eSLDate) :
                new ObjectParameter("ESLDate", typeof(System.DateTime));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("Cost", cost) :
                new ObjectParameter("Cost", typeof(decimal));
    
            var sampleSentQtyParameter = sampleSentQty.HasValue ?
                new ObjectParameter("SampleSentQty", sampleSentQty) :
                new ObjectParameter("SampleSentQty", typeof(decimal));
    
            var bWeightParameter = bWeight.HasValue ?
                new ObjectParameter("BWeight", bWeight) :
                new ObjectParameter("BWeight", typeof(decimal));
    
            var weightofParticularParameter = weightofParticular.HasValue ?
                new ObjectParameter("WeightofParticular", weightofParticular) :
                new ObjectParameter("WeightofParticular", typeof(decimal));
    
            var weightUnitParameter = weightUnit != null ?
                new ObjectParameter("WeightUnit", weightUnit) :
                new ObjectParameter("WeightUnit", typeof(string));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var sectionIDParameter = sectionID.HasValue ?
                new ObjectParameter("SectionID", sectionID) :
                new ObjectParameter("SectionID", typeof(int));
    
            var sectionRowsParameter = sectionRows.HasValue ?
                new ObjectParameter("SectionRows", sectionRows) :
                new ObjectParameter("SectionRows", typeof(int));
    
            var sectionColParameter = sectionCol.HasValue ?
                new ObjectParameter("SectionCol", sectionCol) :
                new ObjectParameter("SectionCol", typeof(int));
    
            var driverNameParameter = driverName != null ?
                new ObjectParameter("DriverName", driverName) :
                new ObjectParameter("DriverName", typeof(string));
    
            var vehicleNoParameter = vehicleNo != null ?
                new ObjectParameter("VehicleNo", vehicleNo) :
                new ObjectParameter("VehicleNo", typeof(string));
    
            var stockBatchIdParameter = stockBatchId.HasValue ?
                new ObjectParameter("StockBatchId", stockBatchId) :
                new ObjectParameter("StockBatchId", typeof(int));
    
            var sentQtyParameter = sentQty.HasValue ?
                new ObjectParameter("SentQty", sentQty) :
                new ObjectParameter("SentQty", typeof(decimal));
    
            var recievedQtyParameter = recievedQty.HasValue ?
                new ObjectParameter("RecievedQty", recievedQty) :
                new ObjectParameter("RecievedQty", typeof(decimal));
    
            var challanNoParameter = challanNo != null ?
                new ObjectParameter("ChallanNo", challanNo) :
                new ObjectParameter("ChallanNo", typeof(string));
    
            var isDDOrCHTParameter = isDDOrCHT != null ?
                new ObjectParameter("IsDDOrCHT", isDDOrCHT) :
                new ObjectParameter("IsDDOrCHT", typeof(string));
    
            var spilledQtyParameter = spilledQty.HasValue ?
                new ObjectParameter("SpilledQty", spilledQty) :
                new ObjectParameter("SpilledQty", typeof(decimal));
    
            var damagedBoxesParameter = damagedBoxes.HasValue ?
                new ObjectParameter("DamagedBoxes", damagedBoxes) :
                new ObjectParameter("DamagedBoxes", typeof(decimal));
    
            var spillageAffectedParameter = spillageAffected.HasValue ?
                new ObjectParameter("SpillageAffected", spillageAffected) :
                new ObjectParameter("SpillageAffected", typeof(decimal));
    
            var sampleAffectedParameter = sampleAffected.HasValue ?
                new ObjectParameter("SampleAffected", sampleAffected) :
                new ObjectParameter("SampleAffected", typeof(decimal));
    
            var bothAffectedParameter = bothAffected.HasValue ?
                new ObjectParameter("BothAffected", bothAffected) :
                new ObjectParameter("BothAffected", typeof(decimal));
    
            var packagingTypeParameter = packagingType != null ?
                new ObjectParameter("PackagingType", packagingType) :
                new ObjectParameter("PackagingType", typeof(string));
    
            var remainingQtyParameter = remainingQty.HasValue ?
                new ObjectParameter("RemainingQty", remainingQty) :
                new ObjectParameter("RemainingQty", typeof(decimal));
    
            var formatParameter = format != null ?
                new ObjectParameter("Format", format) :
                new ObjectParameter("Format", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spStock_Result>("spStock", idParameter, iDsParameter, sIDParameter, isChallanNoParameter, isIrNoParameter, weightParameter, aTNoParameter, supplierNoParameter, cRVNoParameter, recievedFromParameter, pMGradeIdParameter, pMCapacityIdParameter, pMConditionIdParameter, otherSupplierParameter, transferedByParameter, sampleSentParameter, contactNoParameter, challanOrIRParameter, challanOrIRNoParameter, productIdParameter, originalMfgParameter, genericNameParameter, costOfParticularParameter, recievedDateParameter, packagingMaterialNameParameter, packagingMaterialShapeParameter, packagingMaterialSizeParameter, packagingMaterialFormatLevelParameter, remarksParameter, addedByParameter, addedOnParameter, sessionParameter, modifiedByParameter, modifiedOnParameter, packingMaterialFormatParameter, weigthUnitParameter, shapeUnitParameter, isEmptyPMParameter, isWithoutPackingParameter, isSubPackingParameter, isDWParameter, subPMNameParameter, subPMGradeIdParameter, subPMCapacityIdParameter, subPMConditionIdParameter, subPMShapeParameter, subPMSizeParameter, subWeightParameter, subWeightUnitParameter, subShapeUnitParameter, bIDParameter, stockIdParameter, batchNoParameter, warehouseNoParameter, mfgDateParameter, expiryDateParameter, eSLDateParameter, costParameter, sampleSentQtyParameter, bWeightParameter, weightofParticularParameter, weightUnitParameter, warehouseIDParameter, sectionIDParameter, sectionRowsParameter, sectionColParameter, driverNameParameter, vehicleNoParameter, stockBatchIdParameter, sentQtyParameter, recievedQtyParameter, challanNoParameter, isDDOrCHTParameter, spilledQtyParameter, damagedBoxesParameter, spillageAffectedParameter, sampleAffectedParameter, bothAffectedParameter, packagingTypeParameter, remainingQtyParameter, formatParameter, actionParameter, output);
        }
    
        public virtual ObjectResult<spUnit_Result> spUnit(Nullable<int> unit_id, Nullable<int> depu_id, string unit_name, string unit_Desc, Nullable<bool> isActive, string unit_Code, Nullable<System.DateTime> addedOn, Nullable<int> addedBy, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy, string action, ObjectParameter output, Nullable<int> command, Nullable<int> formation, Nullable<int> unitType)
        {
            var unit_idParameter = unit_id.HasValue ?
                new ObjectParameter("Unit_id", unit_id) :
                new ObjectParameter("Unit_id", typeof(int));
    
            var depu_idParameter = depu_id.HasValue ?
                new ObjectParameter("Depu_id", depu_id) :
                new ObjectParameter("Depu_id", typeof(int));
    
            var unit_nameParameter = unit_name != null ?
                new ObjectParameter("Unit_name", unit_name) :
                new ObjectParameter("Unit_name", typeof(string));
    
            var unit_DescParameter = unit_Desc != null ?
                new ObjectParameter("Unit_Desc", unit_Desc) :
                new ObjectParameter("Unit_Desc", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var unit_CodeParameter = unit_Code != null ?
                new ObjectParameter("Unit_Code", unit_Code) :
                new ObjectParameter("Unit_Code", typeof(string));
    
            var addedOnParameter = addedOn.HasValue ?
                new ObjectParameter("AddedOn", addedOn) :
                new ObjectParameter("AddedOn", typeof(System.DateTime));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var commandParameter = command.HasValue ?
                new ObjectParameter("Command", command) :
                new ObjectParameter("Command", typeof(int));
    
            var formationParameter = formation.HasValue ?
                new ObjectParameter("Formation", formation) :
                new ObjectParameter("Formation", typeof(int));
    
            var unitTypeParameter = unitType.HasValue ?
                new ObjectParameter("UnitType", unitType) :
                new ObjectParameter("UnitType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUnit_Result>("spUnit", unit_idParameter, depu_idParameter, unit_nameParameter, unit_DescParameter, isActiveParameter, unit_CodeParameter, addedOnParameter, addedByParameter, modifiedOnParameter, modifiedByParameter, actionParameter, output, commandParameter, formationParameter, unitTypeParameter);
        }
    
        public virtual ObjectResult<spUnitById_Result> spUnitById(string action, string unit_name)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var unit_nameParameter = unit_name != null ?
                new ObjectParameter("Unit_name", unit_name) :
                new ObjectParameter("Unit_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUnitById_Result>("spUnitById", actionParameter, unit_nameParameter);
        }
    
        public virtual int spUpdateStockOnIDTDelete(Nullable<int> sID, Nullable<int> idtID, Nullable<decimal> quantity)
        {
            var sIDParameter = sID.HasValue ?
                new ObjectParameter("SID", sID) :
                new ObjectParameter("SID", typeof(int));
    
            var idtIDParameter = idtID.HasValue ?
                new ObjectParameter("idtID", idtID) :
                new ObjectParameter("idtID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateStockOnIDTDelete", sIDParameter, idtIDParameter, quantityParameter);
        }
    
        public virtual ObjectResult<spUser_Result> spUser(Nullable<int> user_Id, string firstName, string userCode, string lastName, string user_name, Nullable<int> roleId, Nullable<int> country, Nullable<int> state, Nullable<int> city, string address, string contactNo, string password, Nullable<int> isActive, Nullable<System.DateTime> addedOn, Nullable<int> addedBy, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy, string action, ObjectParameter output, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string armyNo)
        {
            var user_IdParameter = user_Id.HasValue ?
                new ObjectParameter("User_Id", user_Id) :
                new ObjectParameter("User_Id", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var user_nameParameter = user_name != null ?
                new ObjectParameter("User_name", user_name) :
                new ObjectParameter("User_name", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var countryParameter = country.HasValue ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(int));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(int));
    
            var cityParameter = city.HasValue ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var addedOnParameter = addedOn.HasValue ?
                new ObjectParameter("AddedOn", addedOn) :
                new ObjectParameter("AddedOn", typeof(System.DateTime));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var armyNoParameter = armyNo != null ?
                new ObjectParameter("ArmyNo", armyNo) :
                new ObjectParameter("ArmyNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUser_Result>("spUser", user_IdParameter, firstNameParameter, userCodeParameter, lastNameParameter, user_nameParameter, roleIdParameter, countryParameter, stateParameter, cityParameter, addressParameter, contactNoParameter, passwordParameter, isActiveParameter, addedOnParameter, addedByParameter, modifiedOnParameter, modifiedByParameter, actionParameter, output, startDateParameter, endDateParameter, armyNoParameter);
        }
    
        public virtual int usp_add_update_Authority(Nullable<int> auid, string auname, Nullable<int> userId, Nullable<bool> active, Nullable<int> fyear, Nullable<int> orderType, Nullable<int> qid)
        {
            var auidParameter = auid.HasValue ?
                new ObjectParameter("Auid", auid) :
                new ObjectParameter("Auid", typeof(int));
    
            var aunameParameter = auname != null ?
                new ObjectParameter("Auname", auname) :
                new ObjectParameter("Auname", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(bool));
    
            var fyearParameter = fyear.HasValue ?
                new ObjectParameter("Fyear", fyear) :
                new ObjectParameter("Fyear", typeof(int));
    
            var orderTypeParameter = orderType.HasValue ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(int));
    
            var qidParameter = qid.HasValue ?
                new ObjectParameter("Qid", qid) :
                new ObjectParameter("Qid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_add_update_Authority", auidParameter, aunameParameter, userIdParameter, activeParameter, fyearParameter, orderTypeParameter, qidParameter);
        }
    
        public virtual int usp_Autogenrate_LoadTallyNumber(string vechileNo, Nullable<int> issueorderId)
        {
            var vechileNoParameter = vechileNo != null ?
                new ObjectParameter("vechileNo", vechileNo) :
                new ObjectParameter("vechileNo", typeof(string));
    
            var issueorderIdParameter = issueorderId.HasValue ?
                new ObjectParameter("IssueorderId", issueorderId) :
                new ObjectParameter("IssueorderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Autogenrate_LoadTallyNumber", vechileNoParameter, issueorderIdParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> usp_CheckProductExsist(string prdname)
        {
            var prdnameParameter = prdname != null ?
                new ObjectParameter("Prdname", prdname) :
                new ObjectParameter("Prdname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("usp_CheckProductExsist", prdnameParameter);
        }
    
        public virtual int usp_creareIssueVoucherNumber(Nullable<int> issueorderId, Nullable<int> catId, string ivNo)
        {
            var issueorderIdParameter = issueorderId.HasValue ?
                new ObjectParameter("IssueorderId", issueorderId) :
                new ObjectParameter("IssueorderId", typeof(int));
    
            var catIdParameter = catId.HasValue ?
                new ObjectParameter("CatId", catId) :
                new ObjectParameter("CatId", typeof(int));
    
            var ivNoParameter = ivNo != null ?
                new ObjectParameter("ivNo", ivNo) :
                new ObjectParameter("ivNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_creareIssueVoucherNumber", issueorderIdParameter, catIdParameter, ivNoParameter);
        }
    
        public virtual int usp_createIssueOrderNumber(ObjectParameter intResult)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_createIssueOrderNumber", intResult);
        }
    
        public virtual ObjectResult<usp_DeleteIssuedVehicle_Result> usp_DeleteIssuedVehicle(Nullable<int> id, Nullable<int> @case)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var caseParameter = @case.HasValue ?
                new ObjectParameter("Case", @case) :
                new ObjectParameter("Case", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DeleteIssuedVehicle_Result>("usp_DeleteIssuedVehicle", idParameter, caseParameter);
        }
    
        public virtual ObjectResult<usp_Dropdowngetcategory_Result> usp_Dropdowngetcategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Dropdowngetcategory_Result>("usp_Dropdowngetcategory");
        }
    
        public virtual ObjectResult<usp_DUMMYgrdbachwithproductqty_Result> usp_DUMMYgrdbachwithproductqty()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DUMMYgrdbachwithproductqty_Result>("usp_DUMMYgrdbachwithproductqty");
        }
    
        public virtual int usp_GenrateIssueVoucher(Nullable<int> catId, string issueVoucherNumber)
        {
            var catIdParameter = catId.HasValue ?
                new ObjectParameter("catId", catId) :
                new ObjectParameter("catId", typeof(int));
    
            var issueVoucherNumberParameter = issueVoucherNumber != null ?
                new ObjectParameter("IssueVoucherNumber", issueVoucherNumber) :
                new ObjectParameter("IssueVoucherNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GenrateIssueVoucher", catIdParameter, issueVoucherNumberParameter);
        }
    
        public virtual int usp_GenrateLoadTally(Nullable<int> issueorderID, string vechileNo, string authority, string through, string loadtallyNo, string driverName, string rank, string unitNo, Nullable<int> userid, Nullable<System.DateTime> dateofgenration, string remarks)
        {
            var issueorderIDParameter = issueorderID.HasValue ?
                new ObjectParameter("issueorderID", issueorderID) :
                new ObjectParameter("issueorderID", typeof(int));
    
            var vechileNoParameter = vechileNo != null ?
                new ObjectParameter("vechileNo", vechileNo) :
                new ObjectParameter("vechileNo", typeof(string));
    
            var authorityParameter = authority != null ?
                new ObjectParameter("Authority", authority) :
                new ObjectParameter("Authority", typeof(string));
    
            var throughParameter = through != null ?
                new ObjectParameter("through", through) :
                new ObjectParameter("through", typeof(string));
    
            var loadtallyNoParameter = loadtallyNo != null ?
                new ObjectParameter("loadtallyNo", loadtallyNo) :
                new ObjectParameter("loadtallyNo", typeof(string));
    
            var driverNameParameter = driverName != null ?
                new ObjectParameter("driverName", driverName) :
                new ObjectParameter("driverName", typeof(string));
    
            var rankParameter = rank != null ?
                new ObjectParameter("rank", rank) :
                new ObjectParameter("rank", typeof(string));
    
            var unitNoParameter = unitNo != null ?
                new ObjectParameter("UnitNo", unitNo) :
                new ObjectParameter("UnitNo", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("Userid", userid) :
                new ObjectParameter("Userid", typeof(int));
    
            var dateofgenrationParameter = dateofgenration.HasValue ?
                new ObjectParameter("dateofgenration", dateofgenration) :
                new ObjectParameter("dateofgenration", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GenrateLoadTally", issueorderIDParameter, vechileNoParameter, authorityParameter, throughParameter, loadtallyNoParameter, driverNameParameter, rankParameter, unitNoParameter, useridParameter, dateofgenrationParameter, remarksParameter);
        }
    
        public virtual ObjectResult<usp_get_Authority_Result> usp_get_Authority()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_get_Authority_Result>("usp_get_Authority");
        }
    
        public virtual ObjectResult<usp_get_issueorder_Result> usp_get_issueorder(Nullable<int> catId)
        {
            var catIdParameter = catId.HasValue ?
                new ObjectParameter("catId", catId) :
                new ObjectParameter("catId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_get_issueorder_Result>("usp_get_issueorder", catIdParameter);
        }
    
        public virtual ObjectResult<usp_getAllloadtallyDetail_Result> usp_getAllloadtallyDetail(string loadtallyNumberValue)
        {
            var loadtallyNumberValueParameter = loadtallyNumberValue != null ?
                new ObjectParameter("loadtallyNumberValue", loadtallyNumberValue) :
                new ObjectParameter("loadtallyNumberValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getAllloadtallyDetail_Result>("usp_getAllloadtallyDetail", loadtallyNumberValueParameter);
        }
    
        public virtual ObjectResult<usp_getattributeby_financialyear_Result> usp_getattributeby_financialyear()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getattributeby_financialyear_Result>("usp_getattributeby_financialyear");
        }
    
        public virtual ObjectResult<string> usp_GetAttributeName(Nullable<int> typeid)
        {
            var typeidParameter = typeid.HasValue ?
                new ObjectParameter("Typeid", typeid) :
                new ObjectParameter("Typeid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetAttributeName", typeidParameter);
        }
    
        public virtual ObjectResult<usp_getAuthorityDetail_Result> usp_getAuthorityDetail(Nullable<int> authorityId)
        {
            var authorityIdParameter = authorityId.HasValue ?
                new ObjectParameter("AuthorityId", authorityId) :
                new ObjectParameter("AuthorityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getAuthorityDetail_Result>("usp_getAuthorityDetail", authorityIdParameter);
        }
    
        public virtual int usp_getBatch(string action, Nullable<int> prdid)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var prdidParameter = prdid.HasValue ?
                new ObjectParameter("prdid", prdid) :
                new ObjectParameter("prdid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_getBatch", actionParameter, prdidParameter);
        }
    
        public virtual ObjectResult<usp_GetBatchquantity_Result> usp_GetBatchquantity(Nullable<int> productID, Nullable<int> issueorderid)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("productID", productID) :
                new ObjectParameter("productID", typeof(int));
    
            var issueorderidParameter = issueorderid.HasValue ?
                new ObjectParameter("issueorderid", issueorderid) :
                new ObjectParameter("issueorderid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBatchquantity_Result>("usp_GetBatchquantity", productIDParameter, issueorderidParameter);
        }
    
        public virtual ObjectResult<usp_getcategory_Result> usp_getcategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getcategory_Result>("usp_getcategory");
        }
    
        public virtual ObjectResult<usp_getcount_Result> usp_getcount(Nullable<int> productid, Nullable<int> catID, Nullable<int> issueorderid)
        {
            var productidParameter = productid.HasValue ?
                new ObjectParameter("productid", productid) :
                new ObjectParameter("productid", typeof(int));
    
            var catIDParameter = catID.HasValue ?
                new ObjectParameter("catID", catID) :
                new ObjectParameter("catID", typeof(int));
    
            var issueorderidParameter = issueorderid.HasValue ?
                new ObjectParameter("issueorderid", issueorderid) :
                new ObjectParameter("issueorderid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getcount_Result>("usp_getcount", productidParameter, catIDParameter, issueorderidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_getcount_satus(Nullable<int> productid, string issueorderNumber)
        {
            var productidParameter = productid.HasValue ?
                new ObjectParameter("productid", productid) :
                new ObjectParameter("productid", typeof(int));
    
            var issueorderNumberParameter = issueorderNumber != null ?
                new ObjectParameter("issueorderNumber", issueorderNumber) :
                new ObjectParameter("issueorderNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_getcount_satus", productidParameter, issueorderNumberParameter);
        }
    
        public virtual ObjectResult<usp_getdeatilIssuevoucher_Result> usp_getdeatilIssuevoucher(Nullable<int> catid, Nullable<int> issueorderid)
        {
            var catidParameter = catid.HasValue ?
                new ObjectParameter("catid", catid) :
                new ObjectParameter("catid", typeof(int));
    
            var issueorderidParameter = issueorderid.HasValue ?
                new ObjectParameter("issueorderid", issueorderid) :
                new ObjectParameter("issueorderid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getdeatilIssuevoucher_Result>("usp_getdeatilIssuevoucher", catidParameter, issueorderidParameter);
        }
    
        public virtual ObjectResult<usp_getDepuName_Result> usp_getDepuName(Nullable<int> depuid)
        {
            var depuidParameter = depuid.HasValue ?
                new ObjectParameter("depuid", depuid) :
                new ObjectParameter("depuid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getDepuName_Result>("usp_getDepuName", depuidParameter);
        }
    
        public virtual ObjectResult<usp_GetFinancialyear_Result> usp_GetFinancialyear()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetFinancialyear_Result>("usp_GetFinancialyear");
        }
    
        public virtual ObjectResult<usp_GetIdtqty_Result> usp_GetIdtqty(Nullable<int> depuId, Nullable<int> productId, Nullable<int> quaterID)
        {
            var depuIdParameter = depuId.HasValue ?
                new ObjectParameter("depuId", depuId) :
                new ObjectParameter("depuId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var quaterIDParameter = quaterID.HasValue ?
                new ObjectParameter("QuaterID", quaterID) :
                new ObjectParameter("QuaterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIdtqty_Result>("usp_GetIdtqty", depuIdParameter, productIdParameter, quaterIDParameter);
        }
    
        public virtual ObjectResult<usp_getIssueIdtdetail_Result> usp_getIssueIdtdetail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getIssueIdtdetail_Result>("usp_getIssueIdtdetail");
        }
    
        public virtual ObjectResult<usp_getissuevoucherdetail_Result> usp_getissuevoucherdetail(Nullable<int> catid, Nullable<int> issueorderid)
        {
            var catidParameter = catid.HasValue ?
                new ObjectParameter("catid", catid) :
                new ObjectParameter("catid", typeof(int));
    
            var issueorderidParameter = issueorderid.HasValue ?
                new ObjectParameter("issueorderid", issueorderid) :
                new ObjectParameter("issueorderid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getissuevoucherdetail_Result>("usp_getissuevoucherdetail", catidParameter, issueorderidParameter);
        }
    
        public virtual ObjectResult<usp_getIssueVoucherList_Result> usp_getIssueVoucherList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getIssueVoucherList_Result>("usp_getIssueVoucherList");
        }
    
        public virtual ObjectResult<usp_getissuevoucherNumber_Result> usp_getissuevoucherNumber(Nullable<int> issueorderid, Nullable<int> catId)
        {
            var issueorderidParameter = issueorderid.HasValue ?
                new ObjectParameter("issueorderid", issueorderid) :
                new ObjectParameter("issueorderid", typeof(int));
    
            var catIdParameter = catId.HasValue ?
                new ObjectParameter("CatId", catId) :
                new ObjectParameter("CatId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getissuevoucherNumber_Result>("usp_getissuevoucherNumber", issueorderidParameter, catIdParameter);
        }
    
        public virtual ObjectResult<usp_GetIssueVoucherProductByVehicle_Result> usp_GetIssueVoucherProductByVehicle(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIssueVoucherProductByVehicle_Result>("usp_GetIssueVoucherProductByVehicle", idParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_GetIssuevoucherQuantity_Batchwise(Nullable<int> productID, Nullable<int> issueorderid)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("productID", productID) :
                new ObjectParameter("productID", typeof(int));
    
            var issueorderidParameter = issueorderid.HasValue ?
                new ObjectParameter("issueorderid", issueorderid) :
                new ObjectParameter("issueorderid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_GetIssuevoucherQuantity_Batchwise", productIDParameter, issueorderidParameter);
        }
    
        public virtual ObjectResult<usp_GetIssueVoucherToPrint_Result> usp_GetIssueVoucherToPrint(Nullable<int> id, string ivNo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var ivNoParameter = ivNo != null ?
                new ObjectParameter("ivNo", ivNo) :
                new ObjectParameter("ivNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIssueVoucherToPrint_Result>("usp_GetIssueVoucherToPrint", idParameter, ivNoParameter);
        }
    
        public virtual ObjectResult<usp_GetIssueVoucherVehicle_Result> usp_GetIssueVoucherVehicle(Nullable<int> id, string ivNo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var ivNoParameter = ivNo != null ?
                new ObjectParameter("ivNo", ivNo) :
                new ObjectParameter("ivNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIssueVoucherVehicle_Result>("usp_GetIssueVoucherVehicle", idParameter, ivNoParameter);
        }
    
        public virtual ObjectResult<usp_getIssuOrderby_BatchIDT_Result> usp_getIssuOrderby_BatchIDT(Nullable<int> qid, Nullable<int> did)
        {
            var qidParameter = qid.HasValue ?
                new ObjectParameter("Qid", qid) :
                new ObjectParameter("Qid", typeof(int));
    
            var didParameter = did.HasValue ?
                new ObjectParameter("Did", did) :
                new ObjectParameter("Did", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getIssuOrderby_BatchIDT_Result>("usp_getIssuOrderby_BatchIDT", qidParameter, didParameter);
        }
    
        public virtual ObjectResult<usp_getisuueorder_forIssueVoucher_Result> usp_getisuueorder_forIssueVoucher(Nullable<int> catID, Nullable<int> issueorderid)
        {
            var catIDParameter = catID.HasValue ?
                new ObjectParameter("catID", catID) :
                new ObjectParameter("catID", typeof(int));
    
            var issueorderidParameter = issueorderid.HasValue ?
                new ObjectParameter("issueorderid", issueorderid) :
                new ObjectParameter("issueorderid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getisuueorder_forIssueVoucher_Result>("usp_getisuueorder_forIssueVoucher", catIDParameter, issueorderidParameter);
        }
    
        public virtual ObjectResult<usp_GetLoadTallyData_Result> usp_GetLoadTallyData(Nullable<int> lTId)
        {
            var lTIdParameter = lTId.HasValue ?
                new ObjectParameter("LTId", lTId) :
                new ObjectParameter("LTId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetLoadTallyData_Result>("usp_GetLoadTallyData", lTIdParameter);
        }
    
        public virtual ObjectResult<usp_getLoadtallydetail_Result> usp_getLoadtallydetail(string vechileNo, Nullable<int> issueorderId)
        {
            var vechileNoParameter = vechileNo != null ?
                new ObjectParameter("vechileNo", vechileNo) :
                new ObjectParameter("vechileNo", typeof(string));
    
            var issueorderIdParameter = issueorderId.HasValue ?
                new ObjectParameter("issueorderId", issueorderId) :
                new ObjectParameter("issueorderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getLoadtallydetail_Result>("usp_getLoadtallydetail", vechileNoParameter, issueorderIdParameter);
        }
    
        public virtual ObjectResult<usp_getLoadTallyList_Result> usp_getLoadTallyList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getLoadTallyList_Result>("usp_getLoadTallyList");
        }
    
        public virtual ObjectResult<usp_getLoadTallyNumber_Result> usp_getLoadTallyNumber(string vechileNo, Nullable<int> issueorderid)
        {
            var vechileNoParameter = vechileNo != null ?
                new ObjectParameter("VechileNo", vechileNo) :
                new ObjectParameter("VechileNo", typeof(string));
    
            var issueorderidParameter = issueorderid.HasValue ?
                new ObjectParameter("issueorderid", issueorderid) :
                new ObjectParameter("issueorderid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getLoadTallyNumber_Result>("usp_getLoadTallyNumber", vechileNoParameter, issueorderidParameter);
        }
    
        public virtual ObjectResult<usp_GetLoadTallyToPrint_Result> usp_GetLoadTallyToPrint(string loadtallyNumber)
        {
            var loadtallyNumberParameter = loadtallyNumber != null ?
                new ObjectParameter("LoadtallyNumber", loadtallyNumber) :
                new ObjectParameter("LoadtallyNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetLoadTallyToPrint_Result>("usp_GetLoadTallyToPrint", loadtallyNumberParameter);
        }
    
        public virtual ObjectResult<usp_GetOrderDetail_Result> usp_GetOrderDetail(Nullable<int> depuid, Nullable<int> productId, Nullable<int> quaterId)
        {
            var depuidParameter = depuid.HasValue ?
                new ObjectParameter("Depuid", depuid) :
                new ObjectParameter("Depuid", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var quaterIdParameter = quaterId.HasValue ?
                new ObjectParameter("QuaterId", quaterId) :
                new ObjectParameter("QuaterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetOrderDetail_Result>("usp_GetOrderDetail", depuidParameter, productIdParameter, quaterIdParameter);
        }
    
        public virtual ObjectResult<usp_getprdDetail_Result> usp_getprdDetail(Nullable<int> prdID)
        {
            var prdIDParameter = prdID.HasValue ?
                new ObjectParameter("prdID", prdID) :
                new ObjectParameter("prdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getprdDetail_Result>("usp_getprdDetail", prdIDParameter);
        }
    
        public virtual ObjectResult<usp_getproductData_Result> usp_getproductData(string productName)
        {
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getproductData_Result>("usp_getproductData", productNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_getRemainingIDT(Nullable<int> productId, Nullable<int> depuID, Nullable<int> typeId, Nullable<int> quaterID)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var depuIDParameter = depuID.HasValue ?
                new ObjectParameter("depuID", depuID) :
                new ObjectParameter("depuID", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            var quaterIDParameter = quaterID.HasValue ?
                new ObjectParameter("quaterID", quaterID) :
                new ObjectParameter("quaterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_getRemainingIDT", productIdParameter, depuIDParameter, typeIdParameter, quaterIDParameter);
        }
    
        public virtual ObjectResult<usp_getStockQuantity_Result> usp_getStockQuantity(Nullable<int> prdID)
        {
            var prdIDParameter = prdID.HasValue ?
                new ObjectParameter("prdID", prdID) :
                new ObjectParameter("prdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getStockQuantity_Result>("usp_getStockQuantity", prdIDParameter);
        }
    
        public virtual ObjectResult<usp_GetVechile_Detail_Result> usp_GetVechile_Detail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetVechile_Detail_Result>("usp_GetVechile_Detail");
        }
    
        public virtual ObjectResult<usp_getVechile_prdquantity_Result> usp_getVechile_prdquantity()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getVechile_prdquantity_Result>("usp_getVechile_prdquantity");
        }
    
        public virtual ObjectResult<string> usp_getvechileAutocompete(string searchText)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_getvechileAutocompete", searchTextParameter);
        }
    
        public virtual ObjectResult<usp_getvechiledetailbatchwise_Result> usp_getvechiledetailbatchwise(Nullable<int> issueorderid, Nullable<int> productid, string batchno)
        {
            var issueorderidParameter = issueorderid.HasValue ?
                new ObjectParameter("issueorderid", issueorderid) :
                new ObjectParameter("issueorderid", typeof(int));
    
            var productidParameter = productid.HasValue ?
                new ObjectParameter("productid", productid) :
                new ObjectParameter("productid", typeof(int));
    
            var batchnoParameter = batchno != null ?
                new ObjectParameter("batchno", batchno) :
                new ObjectParameter("batchno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getvechiledetailbatchwise_Result>("usp_getvechiledetailbatchwise", issueorderidParameter, productidParameter, batchnoParameter);
        }
    
        public virtual ObjectResult<usp_getvechileDetailforLoadtally_Result> usp_getvechileDetailforLoadtally(string vechileNo)
        {
            var vechileNoParameter = vechileNo != null ?
                new ObjectParameter("VechileNo", vechileNo) :
                new ObjectParameter("VechileNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getvechileDetailforLoadtally_Result>("usp_getvechileDetailforLoadtally", vechileNoParameter);
        }
    
        public virtual ObjectResult<usp_getVechiledetails_Result> usp_getVechiledetails(Nullable<int> productID, Nullable<int> issueorderid)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("productID", productID) :
                new ObjectParameter("productID", typeof(int));
    
            var issueorderidParameter = issueorderid.HasValue ?
                new ObjectParameter("issueorderid", issueorderid) :
                new ObjectParameter("issueorderid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getVechiledetails_Result>("usp_getVechiledetails", productIDParameter, issueorderidParameter);
        }
    
        public virtual ObjectResult<usp_grdbachwithproductqty_Result> usp_grdbachwithproductqty(Nullable<int> batchCode)
        {
            var batchCodeParameter = batchCode.HasValue ?
                new ObjectParameter("BatchCode", batchCode) :
                new ObjectParameter("BatchCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_grdbachwithproductqty_Result>("usp_grdbachwithproductqty", batchCodeParameter);
        }
    
        public virtual int usp_idtQty_Quarter(string prdName, string dipuname, Nullable<int> dipuIdtQty, string quarterRange)
        {
            var prdNameParameter = prdName != null ?
                new ObjectParameter("prdName", prdName) :
                new ObjectParameter("prdName", typeof(string));
    
            var dipunameParameter = dipuname != null ?
                new ObjectParameter("Dipuname", dipuname) :
                new ObjectParameter("Dipuname", typeof(string));
    
            var dipuIdtQtyParameter = dipuIdtQty.HasValue ?
                new ObjectParameter("DipuIdtQty", dipuIdtQty) :
                new ObjectParameter("DipuIdtQty", typeof(int));
    
            var quarterRangeParameter = quarterRange != null ?
                new ObjectParameter("QuarterRange", quarterRange) :
                new ObjectParameter("QuarterRange", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_idtQty_Quarter", prdNameParameter, dipunameParameter, dipuIdtQtyParameter, quarterRangeParameter);
        }
    
        public virtual int usp_Insert_IssueOrder(string issueorderNo, Nullable<System.DateTime> issueorderdate, string authority, Nullable<int> depoid, Nullable<int> qid, Nullable<int> productid, Nullable<int> issuequantity, Nullable<int> userid, string iDTICTAWS, ObjectParameter intResult)
        {
            var issueorderNoParameter = issueorderNo != null ?
                new ObjectParameter("issueorderNo", issueorderNo) :
                new ObjectParameter("issueorderNo", typeof(string));
    
            var issueorderdateParameter = issueorderdate.HasValue ?
                new ObjectParameter("issueorderdate", issueorderdate) :
                new ObjectParameter("issueorderdate", typeof(System.DateTime));
    
            var authorityParameter = authority != null ?
                new ObjectParameter("authority", authority) :
                new ObjectParameter("authority", typeof(string));
    
            var depoidParameter = depoid.HasValue ?
                new ObjectParameter("depoid", depoid) :
                new ObjectParameter("depoid", typeof(int));
    
            var qidParameter = qid.HasValue ?
                new ObjectParameter("qid", qid) :
                new ObjectParameter("qid", typeof(int));
    
            var productidParameter = productid.HasValue ?
                new ObjectParameter("productid", productid) :
                new ObjectParameter("productid", typeof(int));
    
            var issuequantityParameter = issuequantity.HasValue ?
                new ObjectParameter("issuequantity", issuequantity) :
                new ObjectParameter("issuequantity", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var iDTICTAWSParameter = iDTICTAWS != null ?
                new ObjectParameter("IDTICTAWS", iDTICTAWS) :
                new ObjectParameter("IDTICTAWS", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_IssueOrder", issueorderNoParameter, issueorderdateParameter, authorityParameter, depoidParameter, qidParameter, productidParameter, issuequantityParameter, useridParameter, iDTICTAWSParameter, intResult);
        }
    
        public virtual int usp_InsertBatchIDT(string batchName, Nullable<int> bid, Nullable<decimal> issueqty, string depuID, string productID, Nullable<int> quaterID, string remarks, ObjectParameter intResult)
        {
            var batchNameParameter = batchName != null ?
                new ObjectParameter("BatchName", batchName) :
                new ObjectParameter("BatchName", typeof(string));
    
            var bidParameter = bid.HasValue ?
                new ObjectParameter("Bid", bid) :
                new ObjectParameter("Bid", typeof(int));
    
            var issueqtyParameter = issueqty.HasValue ?
                new ObjectParameter("issueqty", issueqty) :
                new ObjectParameter("issueqty", typeof(decimal));
    
            var depuIDParameter = depuID != null ?
                new ObjectParameter("depuID", depuID) :
                new ObjectParameter("depuID", typeof(string));
    
            var productIDParameter = productID != null ?
                new ObjectParameter("productID", productID) :
                new ObjectParameter("productID", typeof(string));
    
            var quaterIDParameter = quaterID.HasValue ?
                new ObjectParameter("QuaterID", quaterID) :
                new ObjectParameter("QuaterID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertBatchIDT", batchNameParameter, bidParameter, issueqtyParameter, depuIDParameter, productIDParameter, quaterIDParameter, remarksParameter, intResult);
        }
    
        public virtual int usp_InsertPrdIdt_QTY(string prdName, string dipuname, Nullable<int> dipuIdtQty, ObjectParameter intResult)
        {
            var prdNameParameter = prdName != null ?
                new ObjectParameter("prdName", prdName) :
                new ObjectParameter("prdName", typeof(string));
    
            var dipunameParameter = dipuname != null ?
                new ObjectParameter("Dipuname", dipuname) :
                new ObjectParameter("Dipuname", typeof(string));
    
            var dipuIdtQtyParameter = dipuIdtQty.HasValue ?
                new ObjectParameter("DipuIdtQty", dipuIdtQty) :
                new ObjectParameter("DipuIdtQty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertPrdIdt_QTY", prdNameParameter, dipunameParameter, dipuIdtQtyParameter, intResult);
        }
    
        public virtual int usp_InsertQuarter(Nullable<int> noofMonth)
        {
            var noofMonthParameter = noofMonth.HasValue ?
                new ObjectParameter("noofMonth", noofMonth) :
                new ObjectParameter("noofMonth", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertQuarter", noofMonthParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_IssueVoucherDetail_AddUpdate(Nullable<int> id, Nullable<int> issueOrderId, string issueVoucherName, Nullable<System.DateTime> dateOfGeneratation, Nullable<int> userId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var issueOrderIdParameter = issueOrderId.HasValue ?
                new ObjectParameter("IssueOrderId", issueOrderId) :
                new ObjectParameter("IssueOrderId", typeof(int));
    
            var issueVoucherNameParameter = issueVoucherName != null ?
                new ObjectParameter("IssueVoucherName", issueVoucherName) :
                new ObjectParameter("IssueVoucherName", typeof(string));
    
            var dateOfGeneratationParameter = dateOfGeneratation.HasValue ?
                new ObjectParameter("DateOfGeneratation", dateOfGeneratation) :
                new ObjectParameter("DateOfGeneratation", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_IssueVoucherDetail_AddUpdate", idParameter, issueOrderIdParameter, issueVoucherNameParameter, dateOfGeneratationParameter, userIdParameter);
        }
    
        public virtual int usp_IssueVoucherVehicleDetail_AddUpdate(string issueVoucherId, Nullable<int> productId, string batchNo, string vehicleNo, Nullable<decimal> pMQuantity, Nullable<decimal> stockQuantity, string voucherRemarks, Nullable<int> userId, Nullable<System.DateTime> dateofgenration, string through, string authority, Nullable<int> catid, Nullable<int> issueorderid, string formatFull, string formatLoose, string leftFormatFull, string leftFormatLoose, Nullable<decimal> fullQty, Nullable<int> @case, Nullable<int> fullOccupied, ObjectParameter intResult)
        {
            var issueVoucherIdParameter = issueVoucherId != null ?
                new ObjectParameter("IssueVoucherId", issueVoucherId) :
                new ObjectParameter("IssueVoucherId", typeof(string));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var vehicleNoParameter = vehicleNo != null ?
                new ObjectParameter("VehicleNo", vehicleNo) :
                new ObjectParameter("VehicleNo", typeof(string));
    
            var pMQuantityParameter = pMQuantity.HasValue ?
                new ObjectParameter("PMQuantity", pMQuantity) :
                new ObjectParameter("PMQuantity", typeof(decimal));
    
            var stockQuantityParameter = stockQuantity.HasValue ?
                new ObjectParameter("StockQuantity", stockQuantity) :
                new ObjectParameter("StockQuantity", typeof(decimal));
    
            var voucherRemarksParameter = voucherRemarks != null ?
                new ObjectParameter("VoucherRemarks", voucherRemarks) :
                new ObjectParameter("VoucherRemarks", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var dateofgenrationParameter = dateofgenration.HasValue ?
                new ObjectParameter("dateofgenration", dateofgenration) :
                new ObjectParameter("dateofgenration", typeof(System.DateTime));
    
            var throughParameter = through != null ?
                new ObjectParameter("Through", through) :
                new ObjectParameter("Through", typeof(string));
    
            var authorityParameter = authority != null ?
                new ObjectParameter("authority", authority) :
                new ObjectParameter("authority", typeof(string));
    
            var catidParameter = catid.HasValue ?
                new ObjectParameter("catid", catid) :
                new ObjectParameter("catid", typeof(int));
    
            var issueorderidParameter = issueorderid.HasValue ?
                new ObjectParameter("issueorderid", issueorderid) :
                new ObjectParameter("issueorderid", typeof(int));
    
            var formatFullParameter = formatFull != null ?
                new ObjectParameter("FormatFull", formatFull) :
                new ObjectParameter("FormatFull", typeof(string));
    
            var formatLooseParameter = formatLoose != null ?
                new ObjectParameter("FormatLoose", formatLoose) :
                new ObjectParameter("FormatLoose", typeof(string));
    
            var leftFormatFullParameter = leftFormatFull != null ?
                new ObjectParameter("LeftFormatFull", leftFormatFull) :
                new ObjectParameter("LeftFormatFull", typeof(string));
    
            var leftFormatLooseParameter = leftFormatLoose != null ?
                new ObjectParameter("LeftFormatLoose", leftFormatLoose) :
                new ObjectParameter("LeftFormatLoose", typeof(string));
    
            var fullQtyParameter = fullQty.HasValue ?
                new ObjectParameter("FullQty", fullQty) :
                new ObjectParameter("FullQty", typeof(decimal));
    
            var caseParameter = @case.HasValue ?
                new ObjectParameter("Case", @case) :
                new ObjectParameter("Case", typeof(int));
    
            var fullOccupiedParameter = fullOccupied.HasValue ?
                new ObjectParameter("FullOccupied", fullOccupied) :
                new ObjectParameter("FullOccupied", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IssueVoucherVehicleDetail_AddUpdate", issueVoucherIdParameter, productIdParameter, batchNoParameter, vehicleNoParameter, pMQuantityParameter, stockQuantityParameter, voucherRemarksParameter, userIdParameter, dateofgenrationParameter, throughParameter, authorityParameter, catidParameter, issueorderidParameter, formatFullParameter, formatLooseParameter, leftFormatFullParameter, leftFormatLooseParameter, fullQtyParameter, caseParameter, fullOccupiedParameter, intResult);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_StockOutMain_AddUpdate(Nullable<int> quarterId, Nullable<int> productId, Nullable<int> depotId, Nullable<int> userId, Nullable<decimal> iDT, Nullable<bool> iDTUpdate, Nullable<int> typeId, Nullable<int> yearvalue)
        {
            var quarterIdParameter = quarterId.HasValue ?
                new ObjectParameter("QuarterId", quarterId) :
                new ObjectParameter("QuarterId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var depotIdParameter = depotId.HasValue ?
                new ObjectParameter("DepotId", depotId) :
                new ObjectParameter("DepotId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var iDTParameter = iDT.HasValue ?
                new ObjectParameter("IDT", iDT) :
                new ObjectParameter("IDT", typeof(decimal));
    
            var iDTUpdateParameter = iDTUpdate.HasValue ?
                new ObjectParameter("IDTUpdate", iDTUpdate) :
                new ObjectParameter("IDTUpdate", typeof(bool));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            var yearvalueParameter = yearvalue.HasValue ?
                new ObjectParameter("Yearvalue", yearvalue) :
                new ObjectParameter("Yearvalue", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_StockOutMain_AddUpdate", quarterIdParameter, productIdParameter, depotIdParameter, userIdParameter, iDTParameter, iDTUpdateParameter, typeIdParameter, yearvalueParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_StockOutMain_Depot_Update(Nullable<int> quarterId, Nullable<int> depotId, Nullable<int> userId, Nullable<int> typeId, Nullable<int> yearvalue)
        {
            var quarterIdParameter = quarterId.HasValue ?
                new ObjectParameter("QuarterId", quarterId) :
                new ObjectParameter("QuarterId", typeof(int));
    
            var depotIdParameter = depotId.HasValue ?
                new ObjectParameter("DepotId", depotId) :
                new ObjectParameter("DepotId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            var yearvalueParameter = yearvalue.HasValue ?
                new ObjectParameter("Yearvalue", yearvalue) :
                new ObjectParameter("Yearvalue", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_StockOutMain_Depot_Update", quarterIdParameter, depotIdParameter, userIdParameter, typeIdParameter, yearvalueParameter);
        }
    
        public virtual int usp_StockOutMain_GetDatabyQuarter(Nullable<int> quarterId, Nullable<int> typeId, Nullable<int> yearvalue)
        {
            var quarterIdParameter = quarterId.HasValue ?
                new ObjectParameter("QuarterId", quarterId) :
                new ObjectParameter("QuarterId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            var yearvalueParameter = yearvalue.HasValue ?
                new ObjectParameter("Yearvalue", yearvalue) :
                new ObjectParameter("Yearvalue", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_StockOutMain_GetDatabyQuarter", quarterIdParameter, typeIdParameter, yearvalueParameter);
        }
    
        public virtual ObjectResult<usp_StockOutMain_GetDepots_Result> usp_StockOutMain_GetDepots(Nullable<int> quarterId, Nullable<int> depotId, Nullable<bool> newDepot, Nullable<bool> isParent, Nullable<int> typeid, Nullable<int> yearvalue, string type)
        {
            var quarterIdParameter = quarterId.HasValue ?
                new ObjectParameter("QuarterId", quarterId) :
                new ObjectParameter("QuarterId", typeof(int));
    
            var depotIdParameter = depotId.HasValue ?
                new ObjectParameter("DepotId", depotId) :
                new ObjectParameter("DepotId", typeof(int));
    
            var newDepotParameter = newDepot.HasValue ?
                new ObjectParameter("NewDepot", newDepot) :
                new ObjectParameter("NewDepot", typeof(bool));
    
            var isParentParameter = isParent.HasValue ?
                new ObjectParameter("IsParent", isParent) :
                new ObjectParameter("IsParent", typeof(bool));
    
            var typeidParameter = typeid.HasValue ?
                new ObjectParameter("Typeid", typeid) :
                new ObjectParameter("Typeid", typeof(int));
    
            var yearvalueParameter = yearvalue.HasValue ?
                new ObjectParameter("Yearvalue", yearvalue) :
                new ObjectParameter("Yearvalue", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_StockOutMain_GetDepots_Result>("usp_StockOutMain_GetDepots", quarterIdParameter, depotIdParameter, newDepotParameter, isParentParameter, typeidParameter, yearvalueParameter, typeParameter);
        }
    
        public virtual int usp_StockOutMain_Product_Add(Nullable<int> quarterId, Nullable<int> productId, Nullable<int> userId, Nullable<int> typeId, Nullable<int> yearvalue)
        {
            var quarterIdParameter = quarterId.HasValue ?
                new ObjectParameter("QuarterId", quarterId) :
                new ObjectParameter("QuarterId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            var yearvalueParameter = yearvalue.HasValue ?
                new ObjectParameter("Yearvalue", yearvalue) :
                new ObjectParameter("Yearvalue", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_StockOutMain_Product_Add", quarterIdParameter, productIdParameter, userIdParameter, typeIdParameter, yearvalueParameter);
        }
    
        public virtual ObjectResult<usp_StockOutMain_Products_Get_Result> usp_StockOutMain_Products_Get(string searchText, Nullable<int> quarterId, Nullable<int> typeId, Nullable<int> yearvalue)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var quarterIdParameter = quarterId.HasValue ?
                new ObjectParameter("QuarterId", quarterId) :
                new ObjectParameter("QuarterId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            var yearvalueParameter = yearvalue.HasValue ?
                new ObjectParameter("Yearvalue", yearvalue) :
                new ObjectParameter("Yearvalue", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_StockOutMain_Products_Get_Result>("usp_StockOutMain_Products_Get", searchTextParameter, quarterIdParameter, typeIdParameter, yearvalueParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_StockOutMain_QuarterData_AutoAdd(Nullable<int> quarterId, Nullable<int> userId)
        {
            var quarterIdParameter = quarterId.HasValue ?
                new ObjectParameter("QuarterId", quarterId) :
                new ObjectParameter("QuarterId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_StockOutMain_QuarterData_AutoAdd", quarterIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<usp_StockOutMain_Quarters_Get_Result> usp_StockOutMain_Quarters_Get(Nullable<int> yearvalue)
        {
            var yearvalueParameter = yearvalue.HasValue ?
                new ObjectParameter("yearvalue", yearvalue) :
                new ObjectParameter("yearvalue", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_StockOutMain_Quarters_Get_Result>("usp_StockOutMain_Quarters_Get", yearvalueParameter);
        }
    
        public virtual int usp_UpdateIdtQty(Nullable<int> prdid, Nullable<int> dipuID, Nullable<int> currentQTY, string refrenceletter, Nullable<System.DateTime> refrenceletterDate, string remarks, Nullable<int> quaterID, Nullable<int> typeId)
        {
            var prdidParameter = prdid.HasValue ?
                new ObjectParameter("prdid", prdid) :
                new ObjectParameter("prdid", typeof(int));
    
            var dipuIDParameter = dipuID.HasValue ?
                new ObjectParameter("dipuID", dipuID) :
                new ObjectParameter("dipuID", typeof(int));
    
            var currentQTYParameter = currentQTY.HasValue ?
                new ObjectParameter("currentQTY", currentQTY) :
                new ObjectParameter("currentQTY", typeof(int));
    
            var refrenceletterParameter = refrenceletter != null ?
                new ObjectParameter("Refrenceletter", refrenceletter) :
                new ObjectParameter("Refrenceletter", typeof(string));
    
            var refrenceletterDateParameter = refrenceletterDate.HasValue ?
                new ObjectParameter("RefrenceletterDate", refrenceletterDate) :
                new ObjectParameter("RefrenceletterDate", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            var quaterIDParameter = quaterID.HasValue ?
                new ObjectParameter("QuaterID", quaterID) :
                new ObjectParameter("QuaterID", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateIdtQty", prdidParameter, dipuIDParameter, currentQTYParameter, refrenceletterParameter, refrenceletterDateParameter, remarksParameter, quaterIDParameter, typeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_VechileMaster_AddUpdate(string through, string vechileNumber, string driverName, string armyRank, string armyNo, string unitNo, string licenseNo, string remarks, string vechileType, Nullable<int> userId, ObjectParameter intResult)
        {
            var throughParameter = through != null ?
                new ObjectParameter("Through", through) :
                new ObjectParameter("Through", typeof(string));
    
            var vechileNumberParameter = vechileNumber != null ?
                new ObjectParameter("VechileNumber", vechileNumber) :
                new ObjectParameter("VechileNumber", typeof(string));
    
            var driverNameParameter = driverName != null ?
                new ObjectParameter("DriverName", driverName) :
                new ObjectParameter("DriverName", typeof(string));
    
            var armyRankParameter = armyRank != null ?
                new ObjectParameter("ArmyRank", armyRank) :
                new ObjectParameter("ArmyRank", typeof(string));
    
            var armyNoParameter = armyNo != null ?
                new ObjectParameter("ArmyNo", armyNo) :
                new ObjectParameter("ArmyNo", typeof(string));
    
            var unitNoParameter = unitNo != null ?
                new ObjectParameter("unitNo", unitNo) :
                new ObjectParameter("unitNo", typeof(string));
    
            var licenseNoParameter = licenseNo != null ?
                new ObjectParameter("LicenseNo", licenseNo) :
                new ObjectParameter("LicenseNo", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var vechileTypeParameter = vechileType != null ?
                new ObjectParameter("vechileType", vechileType) :
                new ObjectParameter("vechileType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_VechileMaster_AddUpdate", throughParameter, vechileNumberParameter, driverNameParameter, armyRankParameter, armyNoParameter, unitNoParameter, licenseNoParameter, remarksParameter, vechileTypeParameter, userIdParameter, intResult);
        }
    
        public virtual ObjectResult<usp_GetVechile_DetailBySearch_Result> usp_GetVechile_DetailBySearch(string todaysdate, string vehicleNos)
        {
            var todaysdateParameter = todaysdate != null ?
                new ObjectParameter("Todaysdate", todaysdate) :
                new ObjectParameter("Todaysdate", typeof(string));
    
            var vehicleNosParameter = vehicleNos != null ?
                new ObjectParameter("VehicleNos", vehicleNos) :
                new ObjectParameter("VehicleNos", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetVechile_DetailBySearch_Result>("usp_GetVechile_DetailBySearch", todaysdateParameter, vehicleNosParameter);
        }
    
        public virtual int usp_UpdateIdtQty_Add(Nullable<int> prdid, Nullable<int> dipuID, Nullable<int> currentQTY, string refrenceletter, Nullable<System.DateTime> refrenceletterDate, string remarks, Nullable<int> quaterID, Nullable<int> typeId)
        {
            var prdidParameter = prdid.HasValue ?
                new ObjectParameter("prdid", prdid) :
                new ObjectParameter("prdid", typeof(int));
    
            var dipuIDParameter = dipuID.HasValue ?
                new ObjectParameter("dipuID", dipuID) :
                new ObjectParameter("dipuID", typeof(int));
    
            var currentQTYParameter = currentQTY.HasValue ?
                new ObjectParameter("currentQTY", currentQTY) :
                new ObjectParameter("currentQTY", typeof(int));
    
            var refrenceletterParameter = refrenceletter != null ?
                new ObjectParameter("Refrenceletter", refrenceletter) :
                new ObjectParameter("Refrenceletter", typeof(string));
    
            var refrenceletterDateParameter = refrenceletterDate.HasValue ?
                new ObjectParameter("RefrenceletterDate", refrenceletterDate) :
                new ObjectParameter("RefrenceletterDate", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            var quaterIDParameter = quaterID.HasValue ?
                new ObjectParameter("QuaterID", quaterID) :
                new ObjectParameter("QuaterID", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateIdtQty_Add", prdidParameter, dipuIDParameter, currentQTYParameter, refrenceletterParameter, refrenceletterDateParameter, remarksParameter, quaterIDParameter, typeIdParameter);
        }
    
        public virtual int usp_UpdateIdtQty_Sub(Nullable<int> prdid, Nullable<int> dipuID, Nullable<int> currentQTY, string refrenceletter, Nullable<System.DateTime> refrenceletterDate, string remarks, Nullable<int> quaterID, Nullable<int> typeId)
        {
            var prdidParameter = prdid.HasValue ?
                new ObjectParameter("prdid", prdid) :
                new ObjectParameter("prdid", typeof(int));
    
            var dipuIDParameter = dipuID.HasValue ?
                new ObjectParameter("dipuID", dipuID) :
                new ObjectParameter("dipuID", typeof(int));
    
            var currentQTYParameter = currentQTY.HasValue ?
                new ObjectParameter("currentQTY", currentQTY) :
                new ObjectParameter("currentQTY", typeof(int));
    
            var refrenceletterParameter = refrenceletter != null ?
                new ObjectParameter("Refrenceletter", refrenceletter) :
                new ObjectParameter("Refrenceletter", typeof(string));
    
            var refrenceletterDateParameter = refrenceletterDate.HasValue ?
                new ObjectParameter("RefrenceletterDate", refrenceletterDate) :
                new ObjectParameter("RefrenceletterDate", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            var quaterIDParameter = quaterID.HasValue ?
                new ObjectParameter("QuaterID", quaterID) :
                new ObjectParameter("QuaterID", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateIdtQty_Sub", prdidParameter, dipuIDParameter, currentQTYParameter, refrenceletterParameter, refrenceletterDateParameter, remarksParameter, quaterIDParameter, typeIdParameter);
        }
    }
}
